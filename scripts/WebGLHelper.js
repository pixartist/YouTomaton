//
// WebGLHelper, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
//
// Generated by DuoCode Compiler 0.4.1089.0 beta
//
(function WebGLHelper() {
"use strict";
var $asm = {
    fullName: "WebGLHelper",
    anonymousTypes: [],
    types: [],
    $getAttrs: function() { return [new System.Reflection.AssemblyTitleAttribute.ctor("ClassLibrary"), new System.Reflection.AssemblyDescriptionAttribute.ctor(""), new System.Reflection.AssemblyConfigurationAttribute.ctor(""), new System.Reflection.AssemblyCompanyAttribute.ctor(""), new System.Reflection.AssemblyProductAttribute.ctor("ClassLibrary"), new System.Reflection.AssemblyCopyrightAttribute.ctor("Copyright \xA9  2015"), new System.Reflection.AssemblyTrademarkAttribute.ctor(""), new System.Reflection.AssemblyCultureAttribute.ctor(""), new System.Reflection.AssemblyVersionAttribute.ctor("1.0.0.0"), new System.Reflection.AssemblyFileVersionAttribute.ctor("1.0.0.0"), new DuoCode.Runtime.CompilerAttribute.ctor("0.4.1089.0 beta")]; }
};
var $g = (typeof(global) !== "undefined" ? global : window);
var WebGLHelper = $g.WebGLHelper = $g.WebGLHelper || {};
var $d = DuoCode.Runtime;
$d.$assemblies["WebGLHelper"] = $asm;
WebGLHelper.AABB = $d.declare("WebGLHelper.AABB", System.Object, 0, $asm, function($t, $p) {
    $t.$ator = function() {
        this.Left = 0;
        this.Top = 0;
        this.Right = 0;
        this.Bottom = 0;
    };
    $p.get_Left = function AABB_get_Left() { return this.Left; };
    $p.set_Left = function AABB_set_Left(value) { this.Left = value;return value; };
    $p.get_Top = function AABB_get_Top() { return this.Top; };
    $p.set_Top = function AABB_set_Top(value) { this.Top = value;return value; };
    $p.get_W = function AABB_get_W() {
        return this.get_Right() - this.get_Left();
    };
    $p.set_W = function AABB_set_W(value) {
        var h = value / 2;
        var cx = this.get_X();
        this.set_Left(cx - h);
        this.set_Right(cx + h);
        return value;
    };
    $p.get_H = function AABB_get_H() {
        return this.get_Bottom() - this.get_Top();
    };
    $p.set_H = function AABB_set_H(value) {
        var h = value / 2;
        var cy = this.get_Y();
        this.set_Top(cy - h);
        this.set_Bottom(cy + h);
        return value;
    };
    $p.get_Right = function AABB_get_Right() { return this.Right; };
    $p.set_Right = function AABB_set_Right(value) { this.Right = value;return value; };
    $p.get_Bottom = function AABB_get_Bottom() { return this.Bottom; };
    $p.set_Bottom = function AABB_set_Bottom(value) { this.Bottom = value;return value; };
    $p.get_X = function AABB_get_X() {
        return this.get_Left() + this.get_W() / 2;
    };
    $p.set_X = function AABB_set_X(value) {
        var w = this.get_W();
        this.set_Left(value - w * 0.5);
        this.set_Right(value + w * 0.5);
        return value;
    };
    $p.get_Y = function AABB_get_Y() {
        return this.get_Top() + this.get_H() / 2;
    };
    $p.set_Y = function AABB_set_Y(value) {
        var h = this.get_H();
        this.set_Top(value - h * 0.5);
        this.set_Bottom(value + h * 0.5);
        return value;
    };
    $t.ctor = function AABB() {
        $t.$baseType.ctor.call(this);
        this.set_Left(0);
        this.set_Top(0);
        this.set_W(0);
        this.set_H(0);
    };
    $t.ctor.prototype = $p;
    $t.ctor$1 = function AABB(left, top, right, bottom) {
        $t.$baseType.ctor.call(this);
        this.set_Left(left);
        this.set_Top(top);
        this.set_Right(right);
        this.set_Bottom(bottom);
    };
    $t.ctor$1.prototype = $p;
    $p.Intersects = function AABB_Intersects(other) {
        return this.get_Left() <= other.get_Right() && other.get_Left() <= this.get_Right() && this.get_Top() <= other.get_Bottom() && other.get_Top() <= this.get_Bottom();
    };
    $p.Contains = function AABB_Contains(x, y) {
        return x >= this.get_Left() && x < this.get_Right() && y >= this.get_Top() && y < this.get_Bottom();
    };
    $t.op_Multiply = function AABB_op_Multiply(r, f) {
        var x = r.get_X();
        var y = r.get_Y();
        var w = r.get_W() * f * 0.5;
        var h = r.get_H() * f * 0.5;
        return new WebGLHelper.AABB.ctor$1(x - w, y - h, x + w, y + h);
    };
});
WebGLHelper.Color = $d.declare("WebGLHelper.Color", null, 62, $asm, function($t, $p) {
    $t.ctor = function Color() {
        this.r = 0;
        this.g = 0;
        this.b = 0;
        this.a = 0;
    };
    $t.ctor.prototype = $p;
    $t.ctor$1 = function Color(r, g, b, a) {
        this.r = WebGLHelper.MathHelper.Clamp(0, 1, r);
        this.g = WebGLHelper.MathHelper.Clamp(0, 1, g);
        this.b = WebGLHelper.MathHelper.Clamp(0, 1, b);
        this.a = WebGLHelper.MathHelper.Clamp(0, 1, a);
    };
    $t.ctor$1.prototype = $p;
});
WebGLHelper.MouseButton = $d.declareEnum("WebGLHelper.MouseButton", 44, $asm, 257, ["Left", "Middle", 
    "Right", "Mouse4", "Mouse5"], [0, 1, 2, 3, 4]);
WebGLHelper.KeyCode = $d.declareEnum("WebGLHelper.KeyCode", 46, $asm, 257, ["Shift", "Ctrl", "Space", 
    "Left", "Up", "Right", "Down"], [16, 17, 32, 37, 38, 39, 40]);
WebGLHelper.Input = $d.declare("WebGLHelper.Input", System.Object, 0, $asm, function($t, $p) {
    $t.cctor = function() {
        $t.mbStates = null;
        $t.keyState = null;
        $t.lastLeftMouseDown = new System.DateTime.ctor();
        $t.lastMouse = new WebGLHelper.Vector2.ctor();
        $t.MousePosition = new WebGLHelper.Vector2.ctor();
        $t.Shift = new WebGLHelper.Vector2.ctor();
        $t.OnMouseWheel = null;
        $t.OnMouseClick = null;
        $t.OnMouseDown = null;
        $t.OnMouseUp = null;
        $t.OnMouseMove = null;
        $t.KeyDown = null;
        $t.KeyUp = null;
        $t().mbStates = {};
        $t().mbStates[0 /* MouseButton.Left */] = false;
        $t().mbStates[1 /* MouseButton.Middle */] = false;
        $t().mbStates[2 /* MouseButton.Right */] = false;
        $t().mbStates[3 /* MouseButton.Mouse4 */] = false;
        $t().mbStates[4 /* MouseButton.Mouse5 */] = false;
        $t().set_MousePosition(new WebGLHelper.Vector2.ctor());
        $t().lastMouse = $t().get_MousePosition();
        document.onkeydown = $d.delegate(WebGLHelper.Input._OnKeyDown);
        document.onkeyup = $d.delegate(WebGLHelper.Input._OnKeyUp);
        document.onmousedown = $d.delegate(WebGLHelper.Input._OnMouseDown);
        document.onmouseup = $d.delegate(WebGLHelper.Input._OnMouseUp);
        document.onmousemove = $d.delegate(WebGLHelper.Input._OnMouseMove);
        document.onmousewheel = $d.delegate(WebGLHelper.Input._OnMouseWheel);
        $t().keyState = $d.array(Boolean, 255);
    };
    $t.MouseWheelHandler = $d.declare("MouseWheelHandler", null, 65, $t);
    $t.add_OnMouseWheel = function Input_add_OnMouseWheel(value) {
        this.OnMouseWheel = System.Delegate.Combine(this.OnMouseWheel, value);
    };
    $t.remove_OnMouseWheel = function Input_remove_OnMouseWheel(value) {
        this.OnMouseWheel = System.Delegate.Remove(this.OnMouseWheel, value);
    };
    $t.MouseEventHandler = $d.declare("MouseEventHandler", null, 65, $t);
    $t.add_OnMouseClick = function Input_add_OnMouseClick(value) {
        this.OnMouseClick = System.Delegate.Combine(this.OnMouseClick, value);
    };
    $t.remove_OnMouseClick = function Input_remove_OnMouseClick(value) {
        this.OnMouseClick = System.Delegate.Remove(this.OnMouseClick, value);
    };
    $t.add_OnMouseDown = function Input_add_OnMouseDown(value) {
        this.OnMouseDown = System.Delegate.Combine(this.OnMouseDown, value);
    };
    $t.remove_OnMouseDown = function Input_remove_OnMouseDown(value) {
        this.OnMouseDown = System.Delegate.Remove(this.OnMouseDown, value);
    };
    $t.add_OnMouseUp = function Input_add_OnMouseUp(value) {
        this.OnMouseUp = System.Delegate.Combine(this.OnMouseUp, value);
    };
    $t.remove_OnMouseUp = function Input_remove_OnMouseUp(value) {
        this.OnMouseUp = System.Delegate.Remove(this.OnMouseUp, value);
    };
    $t.add_OnMouseMove = function Input_add_OnMouseMove(value) {
        this.OnMouseMove = System.Delegate.Combine(this.OnMouseMove, value);
    };
    $t.remove_OnMouseMove = function Input_remove_OnMouseMove(value) {
        this.OnMouseMove = System.Delegate.Remove(this.OnMouseMove, value);
    };
    $t.KeyboardEventHandler = $d.declare("KeyboardEventHandler", null, 65, $t);
    $t.add_KeyDown = function Input_add_KeyDown(value) {
        this.KeyDown = System.Delegate.Combine(this.KeyDown, value);
    };
    $t.remove_KeyDown = function Input_remove_KeyDown(value) {
        this.KeyDown = System.Delegate.Remove(this.KeyDown, value);
    };
    $t.add_KeyUp = function Input_add_KeyUp(value) {
        this.KeyUp = System.Delegate.Combine(this.KeyUp, value);
    };
    $t.remove_KeyUp = function Input_remove_KeyUp(value) {
        this.KeyUp = System.Delegate.Remove(this.KeyUp, value);
    };
    $t.get_MouseVelocity = function Input_get_MouseVelocity() {
        return WebGLHelper.Vector2.op_Subtraction($t().get_MousePosition(), $t().lastMouse);
    };
    $t.get_MousePosition = function Input_get_MousePosition() { return $t().MousePosition; };
    $t.set_MousePosition = function Input_set_MousePosition(value) { $t().MousePosition = value;return value; };
    $t.get_Shift = function Input_get_Shift() { return $t().Shift; };
    $t.set_Shift = function Input_set_Shift(value) { $t().Shift = value;return value; };
    $t.GetButtonState = function Input_GetButtonState(b) {
        return $t().mbStates[b];
    };
    $t._OnMouseDown = function Input__OnMouseDown(e) {
        var b = (e.button & 0xFFFF);
        if (!$t().mbStates[b]) {
            $t().mbStates[b] = true;
            if ($t().OnMouseDown != null)
                $t().OnMouseDown($t().get_MousePosition());
            if (b == 0 /* MouseButton.Left */)
                $t().lastLeftMouseDown = System.DateTime().get_Now();
        }
        return true;
    };
    $t._OnMouseUp = function Input__OnMouseUp(e) {
        var b = (e.button & 0xFFFF);
        if ($t().mbStates[b]) {
            $t().mbStates[b] = false;
            if ($t().OnMouseUp != null)
                $t().OnMouseUp($t().get_MousePosition());
            if (b == 0 /* MouseButton.Left */) {
                if ($t().OnMouseClick != null && System.TimeSpan.op_LessThan(System.DateTime.op_Subtraction(System.DateTime().get_Now(), 
                    $t().lastLeftMouseDown), System.TimeSpan.FromMilliseconds(250))) {
                    $t().OnMouseClick($t().get_MousePosition());
                }
            }
        }

        return true;
    };
    $t._OnMouseMove = function Input__OnMouseMove(e) {
        $t().lastMouse = $t().get_MousePosition();
        $t().set_MousePosition(WebGLHelper.Vector2.op_Addition(new WebGLHelper.Vector2.ctor$1(e.x, e.y), 
            $t().get_Shift()));

        if ($t().OnMouseMove != null)
            $t().OnMouseMove($t().get_MousePosition());
        return true;
    };
    $t._OnMouseWheel = function Input__OnMouseWheel(e) {
        if ($t().OnMouseWheel != null)
            $t().OnMouseWheel(e.wheelDelta);
        return true;
    };
    $t._OnKeyDown = function Input__OnKeyDown(e) {
        if (!$t().keyState[e.keyCode]) {
            $t().keyState[e.keyCode] = true;
            if ($t().KeyDown != null)
                $t().KeyDown(e.keyCode);
        }
        return true;
    };
    $t._OnKeyUp = function Input__OnKeyUp(e) {
        if ($t().keyState[e.keyCode]) {
            $t().keyState[e.keyCode] = false;
            if ($t().KeyUp != null)
                $t().KeyUp(e.keyCode);
        }
        return true;
    };
    $t.IsKeyPressed = function Input_IsKeyPressed(keyCode) {
        return $t().keyState[(keyCode | 0)];
    };
});
WebGLHelper.Mat3 = $d.declare("WebGLHelper.Mat3", null, 62, $asm, function($t, $p) {
    $t.cctor = function() {
        $t.GLMatrix3 = mat3;
    };
    $t.ctor = function Mat3() {
        this.mat = null;
    };
    $t.ctor.prototype = $p;
    $t.ctor$1 = function Mat3() {
        this.mat = $t().GLMatrix3.create();
    };
    $t.ctor$1.prototype = $p;
    $t.ctor$2 = function Mat3(rad) {
        this.mat = $t().GLMatrix3.create();
        var s = Math.sin(rad), c = Math.cos(rad);

        this.mat[0] = c;
        this.mat[1] = s;
        this.mat[2] = 0;

        this.mat[3] = -s;
        this.mat[4] = c;
        this.mat[5] = 0;

        this.mat[6] = 0;
        this.mat[7] = 0;
        this.mat[8] = 1;
    };
    $t.ctor$2.prototype = $p;
    $p.SetRotation = function Mat3_SetRotation(rad) {
        var s = Math.sin(rad), c = Math.cos(rad);

        this.mat[0] = c;
        this.mat[1] = s;
        this.mat[2] = 0;

        this.mat[3] = -s;
        this.mat[4] = c;
        this.mat[5] = 0;

        this.mat[6] = 0;
        this.mat[7] = 0;
        this.mat[8] = 1;
    };
});
WebGLHelper.MathHelper = $d.declare("WebGLHelper.MathHelper", System.Object, 0, $asm, function($t, $p) {
    $t.cctor = function() {
        $t.Rnd = new System.Random.ctor();
        $t.Deg2Rad = Math.PI / 180;
        $t.Rad2Deg = 180 / Math.PI;
    };
    $t.Clamp = function MathHelper_Clamp(min, max, v) {
        return v < min ? min : v > max ? max : v;
    };
    $t.R = function MathHelper_R(min, max) {
        var r = $t().Rnd.NextDouble();
        return (max - min) * r + min;
    };
    $t.RV = function MathHelper_RV(v) {
        var r = $t().Rnd.NextDouble() * 2;
        return r * v - v;
    };
});
WebGLHelper.GLBuffer$1 = $d.declare("WebGLHelper.GLBuffer`1", System.Object, 256, $asm, function($t, $p, T) {
    $t.$ator = function() {
        this.buffer = null;
        this.components = 0;
        this.data = null;
        this.dataType = 0;
        this.target = 0;
        this.usage = 0;
        this.requiresUpdate = false;
    };
    $p.get_Length = function GLBuffer$1_get_Length() {
        return this.data.length;
    };
    $p.get_Item = function GLBuffer$1_get_Item(index) {
        return this.data[index];
    };
    $t.ctor = function GLBuffer$1(dataType, target, usage) {
        $t.$baseType.ctor.call(this);
        this.Init();
        this.dataType = dataType;
        this.target = target;
        this.usage = usage;
        this.requiresUpdate = false;
    };
    $p.Init = function GLBuffer$1_Init() {
        this.buffer = WebGLHelper.Program().get_Context().createBuffer();
        this.requiresUpdate = true;
    };
    $p.UpdateBuffer = function GLBuffer$1_UpdateBuffer() {
        if (this.requiresUpdate) {
            WebGLHelper.Program().get_Context().bindBuffer(this.target, this.buffer);
            WebGLHelper.Program().get_Context().bufferData(this.target, this.data, this.usage);
            this.requiresUpdate = false;
        }
    };
    $p.Bind$1 = function GLBuffer$1_Bind(position) {
        WebGLHelper.Program().get_Context().enableVertexAttribArray(position);
        WebGLHelper.Program().get_Context().bindBuffer(this.target, this.buffer);
        WebGLHelper.Program().get_Context().vertexAttribPointer(position, this.components, this.dataType, 
            false, 0, 0);
    };
    $p.Bind = function GLBuffer$1_Bind() {
        WebGLHelper.Program().get_Context().bindBuffer(this.target, this.buffer);
    };
    $p.SetData = function GLBuffer$1_SetData(data) {
        if (data.length > 0) {
            this.data = $d.array(T, data.length);
            Array.Copy(data, this.data, data.length);
        }
        this.requiresUpdate = true;
    };
    $p.GetData = function GLBuffer$1_GetData() {
        return this.data;
    };
}, ["T"]);
WebGLHelper.GLBufferUShort = $d.declare("WebGLHelper.GLBufferUShort", WebGLHelper.GLBuffer$1(System.UInt16), 
    0, $asm, function($t, $p) {
        $t.ctor = function GLBufferUShort(target, usage) {
            $t.$baseType.ctor.call(this, 5125 /* WebGLRenderingContext.UNSIGNED_INT */, target, usage);
            this.components = 0;
        };
        $t.ctor.prototype = $p;
    });
WebGLHelper.GLBufferF = $d.declare("WebGLHelper.GLBufferF", WebGLHelper.GLBuffer$1(System.Single), 0, 
    $asm, function($t, $p) {
        $t.ctor = function GLBufferF(target, usage) {
            $t.$baseType.ctor.call(this, 5126 /* WebGLRenderingContext.FLOAT */, target, usage);
            this.components = 0;
        };
        $t.ctor.prototype = $p;
        $p.SetData$1 = function GLBufferF_SetData(data) {
            if (data.length > 0) {
                this.components = 2;
                var d = $d.array(System.Single, data.length * 2);
                for (var i = 0; i < data.length; i++) {
                    d[i * 2] = data[i].x;
                    d[i * 2 + 1] = data[i].y;
                }
                $t.$baseType.prototype.SetData.call(this, d);
            }
        };
        $p.SetData$2 = function GLBufferF_SetData(data) {
            if (data.length > 0) {
                this.components = 3;
                var d = $d.array(System.Single, data.length * 3);
                for (var i = 0; i < data.length; i++) {
                    d[i * 3] = data[i].x;
                    d[i * 3 + 1] = data[i].y;
                    d[i * 3 + 2] = data[i].z;
                }
                $t.$baseType.prototype.SetData.call(this, d);
            }
        };
    });
WebGLHelper.Mesh2DInfo = $d.declare("WebGLHelper.Mesh2DInfo", null, 62, $asm, function($t, $p) {
    $t.ctor = function Mesh2DInfo() {
        this.v = null;
        this.t = null;
        this.i = null;
    };
    $t.ctor.prototype = $p;
    $t.ctor$1 = function Mesh2DInfo(v, t, i) {
        this.v = v;
        this.t = t;
        this.i = i;
    };
    $t.ctor$1.prototype = $p;
});
WebGLHelper.Mesh2D = $d.declare("WebGLHelper.Mesh2D", System.Object, 0, $asm, function($t, $p) {
    $t.$ator = function() {
        this.vertices = null;
        this.textureCoordinates = null;
        this.triangles = null;
    };
    $p.get_vertices = function Mesh2D_get_vertices() { return this.vertices; };
    $p.set_vertices = function Mesh2D_set_vertices(value) { this.vertices = value;return value; };
    $p.get_textureCoordinates = function Mesh2D_get_textureCoordinates() { return this.textureCoordinates; };
    $p.set_textureCoordinates = function Mesh2D_set_textureCoordinates(value) { this.textureCoordinates = value;return value; };
    $p.get_triangles = function Mesh2D_get_triangles() { return this.triangles; };
    $p.set_triangles = function Mesh2D_set_triangles(value) { this.triangles = value;return value; };
    $t.ctor = function Mesh2D(vertices, texCoords, triangles) {
        $t.$baseType.ctor.call(this);
        this.set_vertices(new WebGLHelper.GLBufferF.ctor(34962, 35044));
        this.get_vertices().SetData$1(vertices);
        this.set_textureCoordinates(new WebGLHelper.GLBufferF.ctor(34962, 35044));
        this.get_textureCoordinates().SetData$1(texCoords);
        this.set_triangles(new WebGLHelper.GLBufferUShort.ctor(34963, 35044));
        this.get_triangles().SetData(triangles);
    };
    $t.ctor.prototype = $p;
    $t.ctor$1 = function Mesh2D(vertices, texCoords, triangles) {
        $t.$baseType.ctor.call(this);
        this.set_vertices(new WebGLHelper.GLBufferF.ctor(34962, 35044));
        this.get_vertices().SetData(vertices);
        this.get_vertices().components = 2;
        this.set_textureCoordinates(new WebGLHelper.GLBufferF.ctor(34962, 35044));
        this.get_textureCoordinates().SetData(texCoords);
        this.get_textureCoordinates().components = 2;
        this.set_triangles(new WebGLHelper.GLBufferUShort.ctor(34963, 35044));
        this.get_triangles().SetData(triangles);
    };
    $t.ctor$1.prototype = $p;
    $p.UpdateBuffers = function Mesh2D_UpdateBuffers() {
        this.get_vertices().UpdateBuffer();
        this.get_textureCoordinates().UpdateBuffer();
        this.get_triangles().UpdateBuffer();
    };
    $p.BindBuffers = function Mesh2D_BindBuffers(vPos, tPos) {
        this.get_vertices().Bind$1(vPos);
        this.get_textureCoordinates().Bind$1(tPos);
        this.get_triangles().Bind();
    };
    $p.GetInfo = function Mesh2D_GetInfo() {
        return new WebGLHelper.Mesh2DInfo.ctor$1(this.get_vertices().GetData(), this.get_textureCoordinates().GetData(), 
            this.get_triangles().GetData());
    };
    $p.ToJSON = function Mesh2D_ToJSON() {
        return JSON.stringify(this.GetInfo());
    };
    $t.FromJson = function Mesh2D_FromJson(gl, data) {

        var def = null;
        try {
            var i = JSON.parse(data);
            def = new WebGLHelper.Mesh2D.ctor$1(i.v, i.t, i.i);
        }
        catch ($e) {
            $e = System.Exception.Wrap($e);
            System.Console.WriteLine$10("Failed to parse JSON: " + data + ", " + $e.get_Message());
        }

        return def;
    };
    $t.Replacer = function Mesh2D_Replacer(key, res) {
        if (key == "gl" || key == "buffer")
            return undefined;
        return res;
    };
});
WebGLHelper.MeshMaker = $d.declare("WebGLHelper.MeshMaker", System.Object, 0, $asm, function($t, $p) {
    $t.MakeRectangle = function MeshMaker_MakeRectangle(width, height) {
        var w = width / 2;
        var h = height / 2;
        return new WebGLHelper.Mesh2D.ctor$1($d.array(System.Single, [-w, -h, w, -h, w, h, -w, h]), $d.array(System.Single, 
            [0, 0, 1, 0, 1, 1, 0, 1]), $d.array(System.UInt16, [0, 1, 3, 1, 2, 3]));
    };
    $t.MakeStar = function MeshMaker_MakeStar(innerRadius, outerRadius) {
        var vert = $d.array(WebGLHelper.Vector2, 10);
        var texCoord = $d.array(WebGLHelper.Vector2, 10);

        var step = Math.PI / 5;
        var p = new WebGLHelper.Vector2.ctor();
        var add = new WebGLHelper.Vector2.ctor$1(outerRadius / 2, outerRadius / 2);
        for (var i = 0; i < 10; i++) {
            var d = innerRadius;
            if (i % 2 == 0)
                d = outerRadius;
            p = WebGLHelper.Vector2.op_Multiply$1(new WebGLHelper.Vector2.ctor$1(Math.cos(step * i), 
                Math.sin(step * i)), d);
            vert[i] = p;
            texCoord[i] = WebGLHelper.Vector2.op_Multiply$1((WebGLHelper.Vector2.op_Addition(p, add)), 
                0.5);
        }
        var tris = $d.array(System.UInt16, [0, 1, 9, 1, 2, 3, 3, 4, 5, 5, 6, 7, 7, 8, 9, 9, 1, 5, 1, 
            3, 5, 5, 7, 9]);
        return new WebGLHelper.Mesh2D.ctor(vert, texCoord, tris);
    };
});
WebGLHelper.PolySprite = $d.declare("WebGLHelper.PolySprite", System.Object, 0, $asm, function($t, $p) {
    $t.$ator = function() {
        this.mesh = null;
        this.rotationMatrix = new WebGLHelper.Mat3.ctor();
        this.rotationAngle = 0;
        this.scale = new WebGLHelper.Vector2.ctor();
        this.position = new WebGLHelper.Vector2.ctor();
        this.texture = null;
        this.BoundingBox = null;
        this.Z = 0;
        this.Color = new WebGLHelper.Color.ctor();
        this.Transparency = 0;
    };
    $p.get_BoundingBox = function PolySprite_get_BoundingBox() { return this.BoundingBox; };
    $p.set_BoundingBox = function PolySprite_set_BoundingBox(value) { this.BoundingBox = value;return value; };
    $p.get_Position = function PolySprite_get_Position() {
        return this.position;
    };
    $p.set_Position = function PolySprite_set_Position(value) {
        this.position = value;
        this.UpdateBB();
        return value;
    };
    $p.get_Z = function PolySprite_get_Z() { return this.Z; };
    $p.set_Z = function PolySprite_set_Z(value) { this.Z = value;return value; };
    $p.get_Color = function PolySprite_get_Color() { return this.Color; };
    $p.set_Color = function PolySprite_set_Color(value) { this.Color = value;return value; };
    $p.get_Transparency = function PolySprite_get_Transparency() { return this.Transparency; };
    $p.set_Transparency = function PolySprite_set_Transparency(value) { this.Transparency = value;return value; };
    $p.get_Scale = function PolySprite_get_Scale() {
        return this.scale;
    };
    $p.set_Scale = function PolySprite_set_Scale(value) {
        this.scale = value;
        this.UpdateBB();
        return value;
    };
    $p.get_RotationAngle = function PolySprite_get_RotationAngle() {
        return this.rotationAngle;
    };
    $p.set_RotationAngle = function PolySprite_set_RotationAngle(value) {
        this.rotationAngle = value;
        this.rotationMatrix.SetRotation(value);
        this.UpdateBB();
        return value;
    };
    $t.ctor = function PolySprite(mesh) {
        $t.$baseType.ctor.call(this);
        this.mesh = mesh;
        this.rotationAngle = 0;
        this.position = new WebGLHelper.Vector2.ctor();
        this.rotationMatrix = new WebGLHelper.Mat3.ctor$1();
        this.set_Color(new WebGLHelper.Color.ctor$1(1, 1, 1, 1));
        this.set_Transparency(1);
        this.scale = new WebGLHelper.Vector2.ctor$1(1, 1);
        this.UpdateBB();
    };
    $t.ctor.prototype = $p;
    $p.UpdateBB = function PolySprite_UpdateBB() {
        var left = Infinity /* Single.PositiveInfinity */;
        var top = Infinity /* Single.PositiveInfinity */;
        var right = (-Infinity) /* Single.NegativeInfinity */;
        var bottom = (-Infinity) /* Single.NegativeInfinity */;

        var tmp = new WebGLHelper.Vector2.ctor();
        for (var i = 0; i < this.mesh.get_vertices().get_Length(); i += 2) {
            tmp = WebGLHelper.Vector2.op_Multiply(new WebGLHelper.Vector2.ctor$1(this.mesh.get_vertices().get_Item(i), 
                this.mesh.get_vertices().get_Item(i + 1)).Transformed(this.rotationMatrix), this.get_Scale());
            if (tmp.x < left)
                left = tmp.x;
            if (tmp.x > right)
                right = tmp.x;
            if (tmp.y < top)
                top = tmp.y;
            if (tmp.y > bottom)
                bottom = tmp.y;
        }
        this.set_BoundingBox(new WebGLHelper.AABB.ctor$1(left + this.get_Position().x, top + this.get_Position().y, 
            right + this.get_Position().x, bottom + this.get_Position().y));
    };
    $p.Update = function PolySprite_Update(t, dt) {};
});
WebGLHelper.Program = $d.declare("WebGLHelper.Program", System.Object, 0, $asm, function($t, $p) {
    $t.cctor = function() {
        $t.GLVector3 = vec3;
        $t.GLMatrix3 = mat3;
        $t.GLMatrix4 = mat4;
        $t.t = 0;
        $t.Context = null;
        $t.Renderer = null;
        $t.Width = 0;
        $t.Height = 0;
        $t.Instance = null;
        $t.Canvas = null;
        $t.EventOnUpdate = null;
    };
    $t.ctor = function Program() {
        $t.$baseType.ctor.call(this);
    };
    $t.ctor.prototype = $p;
    $t.get_Context = function Program_get_Context() { return $t().Context; };
    $t.set_Context = function Program_set_Context(value) { $t().Context = value;return value; };
    $t.get_Renderer = function Program_get_Renderer() { return $t().Renderer; };
    $t.set_Renderer = function Program_set_Renderer(value) { $t().Renderer = value;return value; };
    $t.get_Width = function Program_get_Width() { return $t().Width; };
    $t.set_Width = function Program_set_Width(value) { $t().Width = value;return value; };
    $t.get_Height = function Program_get_Height() { return $t().Height; };
    $t.set_Height = function Program_set_Height(value) { $t().Height = value;return value; };
    $t.get_Instance = function Program_get_Instance() { return $t().Instance; };
    $t.set_Instance = function Program_set_Instance(value) { $t().Instance = value;return value; };
    $t.UpdateHandler = $d.declare("UpdateHandler", null, 65, $t);
    $t.add_EventOnUpdate = function Program_add_EventOnUpdate(value) {
        this.EventOnUpdate = System.Delegate.Combine(this.EventOnUpdate, value);
    };
    $t.remove_EventOnUpdate = function Program_remove_EventOnUpdate(value) {
        this.EventOnUpdate = System.Delegate.Remove(this.EventOnUpdate, value);
    };
    $t.get_Canvas = function Program_get_Canvas() { return $t().Canvas; };
    $t.set_Canvas = function Program_set_Canvas(value) { $t().Canvas = value;return value; };
    $p.Init = function Program_Init() {
        $t().set_Width(($t().get_Canvas().width | 0));
        $t().set_Height(($t().get_Canvas().height | 0));

        $t().get_Context().enable(3042 /* WebGLRenderingContext.BLEND */);
        $t().get_Context().blendFunc(770 /* WebGLRenderingContext.SRC_ALPHA */, 771 /* WebGLRenderingContext.ONE_MINUS_SRC_ALPHA */);
        $t().get_Context().blendEquation(32774 /* WebGLRenderingContext.FUNC_ADD */);
        //Context.blendEquation(GL.BLEND_EQUATION_ALPHA);
        $t().get_Context().enable(2929 /* WebGLRenderingContext.DEPTH_TEST */);
        //Context.getContextAttributes().premultipliedAlpha = false;
        //Context.pixelStorei(GL.UNPACK_PREMULTIPLY_ALPHA_WEBGL, 0);
        $t().get_Context().depthFunc(513 /* WebGLRenderingContext.LESS */);
        if (!$t().get_Context())
            throw new System.Exception.ctor$1("could not initialize WebGL");
        //Renderer = new SpriteRenderer();

        WebGLHelper.Input().set_Shift(new WebGLHelper.Vector2.ctor$1(-$t().get_Canvas().offsetLeft, -$t().get_Canvas().offsetTop));
        // load texture
        // texture = Utils.LoadTexture(this.gl, "WebGL.duocode");
        // testSprite.texture = texture;
        $t().t = new Date().getTime();
        this.OnCreate();
        this.Render();
    };
    $t.Run = function Program_Run(c, context, instance) {
        try {

            $t().set_Canvas(c);
            $t().set_Context(context);
            $t().set_Instance(instance);
            $t().get_Instance().Init();
        }
        catch ($e) {
            $e = System.Exception.Wrap($e);
            System.Console.WriteLine$10($e.ToString());
        }

    };
    $p.Render = function Program_Render() {

        var time = new Date().getTime();
        if (time > $t().t) {
            var dt = ((time - $t().t) / 1000);
            $t().t = time;
            if ($t().EventOnUpdate != null)
                $t().EventOnUpdate($t().t, dt);
            this.OnRender($t().t, dt);
        }
        requestAnimationFrame($d.delegate(function() {
            this.Render();
        }, this));
    };
    $t.SetCanvasSize = function Program_SetCanvasSize(width, height) {
        $t().get_Canvas().width = $d.toUInt32(width);
        $t().set_Width(width);
        $t().get_Canvas().height = $d.toUInt32(height);
        $t().set_Height(height);
    };
    $t.SetCanvasPosition = function Program_SetCanvasPosition(x, y) {};
    $p.OnRender = function Program_OnRender(t, dt) {};
    $p.OnCreate = function Program_OnCreate() {};
});
WebGLHelper.Shader = $d.declare("WebGLHelper.Shader", System.Object, 0, $asm, function($t, $p) {
    $t.$ator = function() {
        this.buffers = null;
        this.uniforms = null;
        this.shaderProgram = null;
    };
    $t.ctor = function Shader(program) {
        $t.$baseType.ctor.call(this);
        this.shaderProgram = program;
        this.buffers = new (System.Collections.Generic.Dictionary$2(String, System.Int32).ctor)();
        this.uniforms = new (System.Collections.Generic.Dictionary$2(String, WebGLUniformLocation).ctor)();
    };
    $t.ctor.prototype = $p;
    $p.SetBuffer = function Shader_SetBuffer(T, name, buffer) {
        var id = { value: -1 };
        if (!this.buffers.TryGetValue(name, id)) {
            id.value = WebGLHelper.Program().get_Context().getAttribLocation(this.shaderProgram, name);
            this.buffers.Add$1(name, id.value);
        }
        if (id.value >= 0)
            buffer.Bind$1($d.toUInt32(id.value));
    };
    $p.SetFloat = function Shader_SetFloat(name, values) {
        var lo = { value: null };
        if (!this.uniforms.TryGetValue(name, lo)) {
            lo.value = WebGLHelper.Program().get_Context().getUniformLocation(this.shaderProgram, name);
            this.uniforms.Add$1(name, lo.value);
        }
        if (lo.value != null) {
            if (values.length == 1)
                WebGLHelper.Program().get_Context().uniform1fv(lo.value, values);
            else
                if (values.length == 2)
                    WebGLHelper.Program().get_Context().uniform2fv(lo.value, values);
                else
                    if (values.length == 3)
                        WebGLHelper.Program().get_Context().uniform3fv(lo.value, values);
                    else
                        if (values.length == 4)
                            WebGLHelper.Program().get_Context().uniform4fv(lo.value, values);
                        else
                            throw $d.signEx((new System.ArgumentException.ctor$1("Only up to 4 float values supported")));
        }
    };
    $p.SetInt = function Shader_SetInt(name, values) {
        var lo = { value: null };
        if (!this.uniforms.TryGetValue(name, lo)) {
            lo.value = WebGLHelper.Program().get_Context().getUniformLocation(this.shaderProgram, name);
            this.uniforms.Add$1(name, lo.value);
        }
        if (lo.value != null) {
            if (values.length == 1)
                WebGLHelper.Program().get_Context().uniform1iv(lo.value, values);
            else
                if (values.length == 2)
                    WebGLHelper.Program().get_Context().uniform2iv(lo.value, values);
                else
                    if (values.length == 3)
                        WebGLHelper.Program().get_Context().uniform3iv(lo.value, values);
                    else
                        if (values.length == 4)
                            WebGLHelper.Program().get_Context().uniform4iv(lo.value, values);
                        else
                            throw $d.signEx((new System.ArgumentException.ctor$1("Only up to 4 float values supported")));
        }
    };
    $p.Use = function Shader_Use() {
        WebGLHelper.Program().get_Context().useProgram(this.shaderProgram);
    };
    $t.CreateShaderFromScriptElement = function Shader_CreateShaderFromScriptElement(gl, scriptId) {
        var shaderScript = $d.cast(document.getElementById(scriptId), HTMLScriptElement);

        if (shaderScript == null)
            throw new System.Exception.ctor$1("unknown script element " + scriptId);

        var shaderSource = shaderScript.text;

        // Now figure out what type of shader script we have, based on its MIME type
        var shaderType = (shaderScript.type == "x-shader/x-fragment") ? 35632 /* WebGLRenderingContext.FRAGMENT_SHADER */ : (shaderScript.type == "x-shader/x-vertex") ? 35633 /* WebGLRenderingContext.VERTEX_SHADER */ : 0;
        if (shaderType == 0)
            throw new System.Exception.ctor$1("unknown shader type");

        var shader = gl.createShader(shaderType);
        gl.shaderSource(shader, shaderSource);

        // Compile the shader program
        gl.compileShader(shader);

        // See if it compiled successfully
        if (!gl.getShaderParameter(shader, 35713 /* WebGLRenderingContext.COMPILE_STATUS */)) {
            // Something went wrong during compilation; get the error
            var errorInfo = gl.getShaderInfoLog(shader);
            gl.deleteShader(shader);
            throw new System.Exception.ctor$1("error compiling shader '" + $d.toString(shader) + "': " + errorInfo);
        }
        return shader;
    };
    $t.CreateShaderFromString = function Shader_CreateShaderFromString(gl, type, shaderCode) {


        var shader = gl.createShader(type);
        gl.shaderSource(shader, shaderCode);

        // Compile the shader program
        gl.compileShader(shader);

        // See if it compiled successfully
        if (!gl.getShaderParameter(shader, 35713 /* WebGLRenderingContext.COMPILE_STATUS */)) {
            // Something went wrong during compilation; get the error
            var errorInfo = gl.getShaderInfoLog(shader);
            gl.deleteShader(shader);
            throw new System.Exception.ctor$1("error compiling shader '" + $d.toString(shader) + "': " + errorInfo);
        }
        return shader;
    };
    $t.CreateShaderProgram = function Shader_CreateShaderProgram(gl, fragmentShader, vertexShader) {
        var shaderProgram = gl.createProgram();
        gl.attachShader(shaderProgram, vertexShader);
        gl.attachShader(shaderProgram, fragmentShader);
        gl.linkProgram(shaderProgram);

        var linkStatus = gl.getProgramParameter(shaderProgram, 35714 /* WebGLRenderingContext.LINK_STATUS */);
        if (!linkStatus)
            throw new System.Exception.ctor$1("failed to link shader");
        return new WebGLHelper.Shader.ctor(shaderProgram);
    };
    $t.CreateShaderProgram$1 = function Shader_CreateShaderProgram(gl, vertexId, fragmentId) {
        return WebGLHelper.Shader.CreateShaderProgram(gl, WebGLHelper.Shader.CreateShaderFromScriptElement(gl, 
            vertexId), WebGLHelper.Shader.CreateShaderFromScriptElement(gl, fragmentId));
    };
    $t.CreateShaderProgramFromStrings = function Shader_CreateShaderProgramFromStrings(gl, vertexShader, fragmentShader) {
        return WebGLHelper.Shader.CreateShaderProgram(gl, WebGLHelper.Shader.CreateShaderFromString(gl, 
            35633 /* WebGLRenderingContext.VERTEX_SHADER */, vertexShader), WebGLHelper.Shader.CreateShaderFromString(gl, 
            35632 /* WebGLRenderingContext.FRAGMENT_SHADER */, fragmentShader));
    };
});
WebGLHelper.SpriteRenderer = $d.declare("WebGLHelper.SpriteRenderer", System.Object, 0, $asm, function($t, $p) {
    $t.cctor = function() {
        $t.GLMatrix3 = mat3;
    };
    $t.$ator = function() {
        this.aVertexPosition = 0;
        this.aTextureCoord = 0;
        this.uSampler = null;
        this.uPosition = null;
        this.uZLayer = null;
        this.uColor = null;
        this.uSamplerCount = null;
        this.uResolution = null;
        this.uRotation = null;
        this.uScale = null;
        this.shaderProgram = null;
        this.rotationMatrix = null;
        this.cameraPos = new WebGLHelper.Vector2.ctor();
        this.Sprites = null;
        this.CameraBox = null;
        this.ClearColor = new WebGLHelper.Color.ctor();
    };
    $p.get_CameraPos = function SpriteRenderer_get_CameraPos() {
        return this.cameraPos;
    };
    $p.set_CameraPos = function SpriteRenderer_set_CameraPos(value) {
        this.cameraPos = value;
        this.UpdateBoundingBox();
        return value;
    };
    $p.get_CameraBox = function SpriteRenderer_get_CameraBox() { return this.CameraBox; };
    $p.set_CameraBox = function SpriteRenderer_set_CameraBox(value) { this.CameraBox = value;return value; };
    $p.get_ClearColor = function SpriteRenderer_get_ClearColor() { return this.ClearColor; };
    $p.set_ClearColor = function SpriteRenderer_set_ClearColor(value) { this.ClearColor = value;return value; };
    $t.ctor = function SpriteRenderer() {
        $t.$baseType.ctor.call(this);
        this.Sprites = new (System.Collections.Generic.Dictionary$2(String, WebGLHelper.PolySprite).ctor)();
        this.rotationMatrix = $t().GLMatrix3.create();
        this.set_ClearColor(new WebGLHelper.Color.ctor$1(0, 0, 0, 1));
        this.set_CameraPos(new WebGLHelper.Vector2.ctor$1(0, 0));
        this.UpdateBoundingBox();
        // init shaders
        var fragmentShader = WebGLHelper.Utils.CreateShaderFromScriptElement(WebGLHelper.Program().get_Context(), 
            "shader-fs");
        var vertexShader = WebGLHelper.Utils.CreateShaderFromScriptElement(WebGLHelper.Program().get_Context(), 
            "shader-vs");

        this.shaderProgram = WebGLHelper.Utils.CreateShaderProgram(WebGLHelper.Program().get_Context(), 
            fragmentShader, vertexShader);

        WebGLHelper.Program().get_Context().useProgram(this.shaderProgram);

        this.aVertexPosition = $d.toUInt32(WebGLHelper.Program().get_Context().getAttribLocation(this.shaderProgram, 
            "aVertexPosition"));
        this.aTextureCoord = $d.toUInt32(WebGLHelper.Program().get_Context().getAttribLocation(this.shaderProgram, 
            "aTextureCoord"));


        this.uSampler = WebGLHelper.Program().get_Context().getUniformLocation(this.shaderProgram, "uSampler");
        this.uPosition = WebGLHelper.Program().get_Context().getUniformLocation(this.shaderProgram, "uPosition");
        this.uZLayer = WebGLHelper.Program().get_Context().getUniformLocation(this.shaderProgram, "uZLayer");
        this.uColor = WebGLHelper.Program().get_Context().getUniformLocation(this.shaderProgram, "uColor");
        this.uSamplerCount = WebGLHelper.Program().get_Context().getUniformLocation(this.shaderProgram, 
            "uSamplerCount");
        this.uResolution = WebGLHelper.Program().get_Context().getUniformLocation(this.shaderProgram, 
            "uResolution");
        this.uRotation = WebGLHelper.Program().get_Context().getUniformLocation(this.shaderProgram, "uRotation");
        this.uScale = WebGLHelper.Program().get_Context().getUniformLocation(this.shaderProgram, "uScale");

        WebGLHelper.Program().get_Context().enableVertexAttribArray(this.aVertexPosition);
        WebGLHelper.Program().get_Context().enableVertexAttribArray(this.aTextureCoord);




        WebGLHelper.Program().add_EventOnUpdate($d.delegate(this.Update, this));
    };
    $t.ctor.prototype = $p;
    $p.UpdateBoundingBox = function SpriteRenderer_UpdateBoundingBox() {
        this.set_CameraBox(new WebGLHelper.AABB.ctor$1(this.get_CameraPos().x - (WebGLHelper.Program().get_Width() / 2 | 0), 
            this.get_CameraPos().y - (WebGLHelper.Program().get_Height() / 2 | 0), this.get_CameraPos().x + (WebGLHelper.Program().get_Width() / 2 | 0), 
            this.get_CameraPos().y + (WebGLHelper.Program().get_Height() / 2 | 0)));
    };
    $p.Screen2World = function SpriteRenderer_Screen2World(screenPos) {
        var cSize = new WebGLHelper.Vector2.ctor$1(WebGLHelper.Program().get_Width(), WebGLHelper.Program().get_Height());
        return WebGLHelper.Vector2.op_Subtraction(screenPos, (WebGLHelper.Vector2.op_Addition(WebGLHelper.Vector2.op_Multiply$1(cSize, 
            0.5), this.get_CameraPos())));
    };
    $p.Update = function SpriteRenderer_Update(t, dt) {
        var $iter = this.Sprites.get_Values();
        var $enumerator = $iter.System$Collections$IEnumerable$GetEnumerator();
        while ($enumerator.System$Collections$IEnumerator$MoveNext()) {
            var s = $enumerator.System$Collections$IEnumerator$get_Current();
            s.Update(t, dt);
        }
    };
    $p.Render = function SpriteRenderer_Render(clear) {
        var w = WebGLHelper.Program().get_Width() / 2;
        var h = WebGLHelper.Program().get_Height() / 2;
        WebGLHelper.Program().get_Context().viewport(0, 0, WebGLHelper.Program().get_Width(), WebGLHelper.Program().get_Height());
        if (clear) {
            WebGLHelper.Program().get_Context().clearColor(this.get_ClearColor().r, this.get_ClearColor().g, 
                this.get_ClearColor().b, this.get_ClearColor().a);
            WebGLHelper.Program().get_Context().clear(16640 /* GL.COLOR_BUFFER_BIT | GL.DEPTH_BUFFER_BIT */);
        }
        WebGLHelper.Program().get_Context().uniform2f(this.uResolution, WebGLHelper.Program().get_Width(), 
            WebGLHelper.Program().get_Height());
        var sortedSprites = System.Linq.Enumerable.ToList(WebGLHelper.PolySprite, this.Sprites.get_Values());
        sortedSprites.Sort$2($d.delegate(function(a, b) {
            return b.get_Z().CompareTo(a.get_Z());
        }, this));
        for (var $i = 0, $length = sortedSprites.storage.length; $i != $length; $i++) {
            var s = sortedSprites.storage[$i];
            if (this.get_CameraBox().Intersects(s.get_BoundingBox())) {
                //position
                WebGLHelper.Program().get_Context().uniform2f(this.uPosition, s.get_Position().x - this.get_CameraPos().x, 
                    s.get_Position().y - this.get_CameraPos().y);
                WebGLHelper.Program().get_Context().uniform1f(this.uZLayer, s.get_Z());
                WebGLHelper.Program().get_Context().uniform4f(this.uColor, s.get_Color().r, s.get_Color().g, 
                    s.get_Color().b, s.get_Color().a * s.get_Transparency());

                //rotation
                WebGLHelper.SpriteRenderer.FromRotation(this.rotationMatrix, s.get_RotationAngle() * WebGLHelper.MathHelper().Deg2Rad);
                WebGLHelper.Program().get_Context().uniformMatrix3fv(this.uRotation, false, this.rotationMatrix);

                //scale
                WebGLHelper.Program().get_Context().uniform2f(this.uScale, s.get_Scale().x, s.get_Scale().y);
                //vertex data
                s.mesh.UpdateBuffers();
                s.mesh.get_vertices().Bind$1(this.aVertexPosition);
                s.mesh.get_textureCoordinates().Bind$1(this.aTextureCoord);
                s.mesh.get_triangles().Bind();


                //texture
                if (s.texture != null) {
                    WebGLHelper.Program().get_Context().uniform1i(this.uSamplerCount, 1);
                    WebGLHelper.Program().get_Context().activeTexture(33984 /* WebGLRenderingContext.TEXTURE0 */);
                    s.texture.Bind(WebGLHelper.Program().get_Context(), 33984);
                    WebGLHelper.Program().get_Context().uniform1i(this.uSampler, 0);
                }
                else
                    WebGLHelper.Program().get_Context().uniform1i(this.uSamplerCount, 0);

                //draw
                WebGLHelper.Program().get_Context().drawElements(4 /* WebGLRenderingContext.TRIANGLES */, 
                    s.mesh.get_triangles().get_Length(), 5123 /* WebGLRenderingContext.UNSIGNED_SHORT */, 
                    0);
            }
        }
    };
    $t.FromRotation = function SpriteRenderer_FromRotation(mat, rad) {
        var s = Math.sin(rad), c = Math.cos(rad);

        mat[0] = c;
        mat[1] = s;
        mat[2] = 0;

        mat[3] = -s;
        mat[4] = c;
        mat[5] = 0;

        mat[6] = 0;
        mat[7] = 0;
        mat[8] = 1;
    };
});
WebGLHelper.Surface = $d.declare("WebGLHelper.Surface", System.Object, 0, $asm, function($t, $p) {
    $t.$ator = function() {
        this.texture = null;
        this.frameBuffer = null;
        this.OnLoaded = null;
        this.Width = 0;
        this.Height = 0;
    };
    $p.get_Width = function Surface_get_Width() { return this.Width; };
    $p.set_Width = function Surface_set_Width(value) { this.Width = value;return value; };
    $p.get_Height = function Surface_get_Height() { return this.Height; };
    $p.set_Height = function Surface_set_Height(value) { this.Height = value;return value; };
    $t.ctor$2 = function Surface(context, width, height, colorType, filtering) {
        $t.$baseType.ctor.call(this);
        this.texture = context.createTexture();
        context.bindTexture(3553 /* WebGLRenderingContext.TEXTURE_2D */, this.texture);
        context.texImage2D(3553 /* WebGLRenderingContext.TEXTURE_2D */, 0, 6408 /* WebGLRenderingContext.RGBA */, 
            (width | 0), (height | 0), 0, 6408 /* WebGLRenderingContext.RGBA */, colorType, null);
        context.texParameteri(3553 /* WebGLRenderingContext.TEXTURE_2D */, 10240 /* WebGLRenderingContext.TEXTURE_MAG_FILTER */, 
            filtering);

        if (!WebGLHelper.Surface.IsPo2(width) || !WebGLHelper.Surface.IsPo2(height)) {
            context.texParameteri(3553 /* WebGLRenderingContext.TEXTURE_2D */, 10241 /* WebGLRenderingContext.TEXTURE_MIN_FILTER */, 
                filtering); //gl.NEAREST is also allowed, instead of gl.LINEAR, as neither mipmap.
            context.texParameteri(3553 /* WebGLRenderingContext.TEXTURE_2D */, 10242 /* WebGLRenderingContext.TEXTURE_WRAP_S */, 
                33071 /* WebGLRenderingContext.CLAMP_TO_EDGE */); //Prevents s-coordinate wrapping (repeating).
            context.texParameteri(3553 /* WebGLRenderingContext.TEXTURE_2D */, 10243 /* WebGLRenderingContext.TEXTURE_WRAP_T */, 
                33071 /* WebGLRenderingContext.CLAMP_TO_EDGE */);
        }
        else {
            context.texParameteri(3553 /* WebGLRenderingContext.TEXTURE_2D */, 10241 /* WebGLRenderingContext.TEXTURE_MIN_FILTER */, 
                filtering);
            context.generateMipmap(3553 /* WebGLRenderingContext.TEXTURE_2D */);
        }
        this.frameBuffer = context.createFramebuffer();
        context.bindFramebuffer(36160 /* WebGLRenderingContext.FRAMEBUFFER */, this.frameBuffer);
        context.framebufferTexture2D(36160 /* WebGLRenderingContext.FRAMEBUFFER */, 36064 /* WebGLRenderingContext.COLOR_ATTACHMENT0 */, 
            3553 /* WebGLRenderingContext.TEXTURE_2D */, this.texture, 0);
        context.bindTexture(3553 /* WebGLRenderingContext.TEXTURE_2D */, null);
        context.bindFramebuffer(36160 /* WebGLRenderingContext.FRAMEBUFFER */, null);
    };
    $t.ctor$2.prototype = $p;
    $t.ctor = function Surface(context, source) {
        $t.$baseType.ctor.call(this);
        System.Console.WriteLine$10("Loading image " + source);
        this.texture = context.createTexture();
        var img = document.createElement("img");
        img.onload = $d.delegate(function(e) {
            this.LoadImgToGL(context, img);
            return 0;
        }, this);
        img.crossOrigin = "Anonymous";
        img.src = source;
    };
    $t.ctor.prototype = $p;
    $t.ctor$1 = function Surface(context, source, callback) {
        $t.$baseType.ctor.call(this);
        System.Console.WriteLine$10("Loading image " + source);
        this.texture = context.createTexture();
        var img = document.createElement("img");
        img.onload = $d.delegate(function(e) {
            this.LoadImgToGL(context, img);
            return 0;
        }, this);
        img.crossOrigin = "Anonymous";
        img.src = source;
        this.OnLoaded = callback;
    };
    $t.ctor$1.prototype = $p;
    $t.IsPo2 = function Surface_IsPo2(x) {
        return (x & (x - 1)) == 0;
    };
    $p.LoadImgToGL = function Surface_LoadImgToGL(context, img) {
        System.Console.WriteLine$10("Loaded image " + $d.toString(img));

        context.bindTexture(3553 /* WebGLRenderingContext.TEXTURE_2D */, this.texture);
        context.texImage2D(3553 /* WebGLRenderingContext.TEXTURE_2D */, 0, 6408 /* WebGLRenderingContext.RGBA */, 
            6408 /* WebGLRenderingContext.RGBA */, 5121 /* WebGLRenderingContext.UNSIGNED_BYTE */, img);
        context.texParameteri(3553 /* WebGLRenderingContext.TEXTURE_2D */, 10240 /* WebGLRenderingContext.TEXTURE_MAG_FILTER */, 
            9729 /* WebGLRenderingContext.LINEAR */);

        if (!WebGLHelper.Surface.IsPo2(img.naturalWidth) || !WebGLHelper.Surface.IsPo2(img.naturalHeight)) {
            context.texParameteri(3553 /* WebGLRenderingContext.TEXTURE_2D */, 10241 /* WebGLRenderingContext.TEXTURE_MIN_FILTER */, 
                9729 /* WebGLRenderingContext.LINEAR */); //gl.NEAREST is also allowed, instead of gl.LINEAR, as neither mipmap.
            context.texParameteri(3553 /* WebGLRenderingContext.TEXTURE_2D */, 10242 /* WebGLRenderingContext.TEXTURE_WRAP_S */, 
                33071 /* WebGLRenderingContext.CLAMP_TO_EDGE */); //Prevents s-coordinate wrapping (repeating).
            context.texParameteri(3553 /* WebGLRenderingContext.TEXTURE_2D */, 10243 /* WebGLRenderingContext.TEXTURE_WRAP_T */, 
                33071 /* WebGLRenderingContext.CLAMP_TO_EDGE */);
        }
        else {
            context.texParameteri(3553 /* WebGLRenderingContext.TEXTURE_2D */, 10241 /* WebGLRenderingContext.TEXTURE_MIN_FILTER */, 
                9985 /* WebGLRenderingContext.LINEAR_MIPMAP_NEAREST */);
            context.generateMipmap(3553 /* WebGLRenderingContext.TEXTURE_2D */);
        }
        this.frameBuffer = context.createFramebuffer();
        context.bindFramebuffer(36160 /* WebGLRenderingContext.FRAMEBUFFER */, this.frameBuffer);
        context.framebufferTexture2D(36160 /* WebGLRenderingContext.FRAMEBUFFER */, 36064 /* WebGLRenderingContext.COLOR_ATTACHMENT0 */, 
            3553 /* WebGLRenderingContext.TEXTURE_2D */, this.texture, 0);
        context.bindTexture(3553 /* WebGLRenderingContext.TEXTURE_2D */, null);
        context.bindFramebuffer(36160 /* WebGLRenderingContext.FRAMEBUFFER */, null);
        this.set_Width((img.naturalWidth | 0));
        this.set_Height((img.naturalHeight | 0));
        if (this.OnLoaded != null)
            this.OnLoaded(this);
    };
    $p.Bind = function Surface_Bind(target) {
        WebGLHelper.Program().get_Context().activeTexture(target);
        WebGLHelper.Program().get_Context().bindTexture(3553 /* WebGLRenderingContext.TEXTURE_2D */, 
            this.texture);
    };
    $p.BindFramebuffer = function Surface_BindFramebuffer() {
        WebGLHelper.Program().get_Context().bindFramebuffer(36160 /* WebGLRenderingContext.FRAMEBUFFER */, 
            this.frameBuffer);
    };
    $p.Clear = function Surface_Clear() {
        this.BindFramebuffer();
        WebGLHelper.Program().get_Context().clear(16640 /* GL.COLOR_BUFFER_BIT | GL.DEPTH_BUFFER_BIT */);
        WebGLHelper.Program().get_Context().bindFramebuffer(36160 /* WebGLRenderingContext.FRAMEBUFFER */, 
            null);
    };
});
WebGLHelper.Texture = $d.declare("WebGLHelper.Texture", System.Object, 0, $asm, function($t, $p) {
    $t.$ator = function() {
        this.texture = null;
        this.OnLoaded = null;
        this.Width = 0;
        this.Height = 0;
        this.Src = null;
    };
    $p.get_Width = function Texture_get_Width() { return this.Width; };
    $p.set_Width = function Texture_set_Width(value) { this.Width = value;return value; };
    $p.get_Height = function Texture_get_Height() { return this.Height; };
    $p.set_Height = function Texture_set_Height(value) { this.Height = value;return value; };
    $p.get_Src = function Texture_get_Src() { return this.Src; };
    $p.set_Src = function Texture_set_Src(value) { this.Src = value;return value; };
    $t.ctor = function Texture(context, source) {
        $t.$baseType.ctor.call(this);
        this.set_Src(source);
        System.Console.WriteLine$10("Loading image " + source);
        this.texture = context.createTexture();
        var img = document.createElement("img");
        img.onload = $d.delegate(function(e) {
            this.LoadImgToGL(context, img);
            return 0;
        }, this);
        img.crossOrigin = "Anonymous";
        img.src = source;
    };
    $t.ctor.prototype = $p;
    $t.ctor$1 = function Texture(context, source, callback) {
        $t.$baseType.ctor.call(this);
        this.set_Src(source);
        System.Console.WriteLine$10("Loading image " + source);
        this.texture = context.createTexture();
        var img = document.createElement("img");
        img.onload = $d.delegate(function(e) {
            this.LoadImgToGL(context, img);
            return 0;
        }, this);
        img.crossOrigin = "Anonymous";
        img.src = source;
        this.OnLoaded = callback;
    };
    $t.ctor$1.prototype = $p;
    $t.IsPo2 = function Texture_IsPo2(x) {
        return (x & (x - 1)) == 0;
    };
    $p.LoadImgToGL = function Texture_LoadImgToGL(context, img) {
        this.set_Src(img.src);
        System.Console.WriteLine$10("Loaded image " + $d.toString(img));
        context.bindTexture(3553 /* WebGLRenderingContext.TEXTURE_2D */, this.texture);
        context.texImage2D(3553 /* WebGLRenderingContext.TEXTURE_2D */, 0, 6408 /* WebGLRenderingContext.RGBA */, 
            6408 /* WebGLRenderingContext.RGBA */, 5121 /* WebGLRenderingContext.UNSIGNED_BYTE */, img);
        context.texParameteri(3553 /* WebGLRenderingContext.TEXTURE_2D */, 10240 /* WebGLRenderingContext.TEXTURE_MAG_FILTER */, 
            9729 /* WebGLRenderingContext.LINEAR */);

        if (!WebGLHelper.Texture.IsPo2(img.naturalWidth) || !WebGLHelper.Texture.IsPo2(img.naturalHeight)) {
            context.texParameteri(3553 /* WebGLRenderingContext.TEXTURE_2D */, 10241 /* WebGLRenderingContext.TEXTURE_MIN_FILTER */, 
                9729 /* WebGLRenderingContext.LINEAR */); //gl.NEAREST is also allowed, instead of gl.LINEAR, as neither mipmap.
            context.texParameteri(3553 /* WebGLRenderingContext.TEXTURE_2D */, 10242 /* WebGLRenderingContext.TEXTURE_WRAP_S */, 
                33071 /* WebGLRenderingContext.CLAMP_TO_EDGE */); //Prevents s-coordinate wrapping (repeating).
            context.texParameteri(3553 /* WebGLRenderingContext.TEXTURE_2D */, 10243 /* WebGLRenderingContext.TEXTURE_WRAP_T */, 
                33071 /* WebGLRenderingContext.CLAMP_TO_EDGE */);
        }
        else {
            context.texParameteri(3553 /* WebGLRenderingContext.TEXTURE_2D */, 10241 /* WebGLRenderingContext.TEXTURE_MIN_FILTER */, 
                9985 /* WebGLRenderingContext.LINEAR_MIPMAP_NEAREST */);
            context.generateMipmap(3553 /* WebGLRenderingContext.TEXTURE_2D */);
        }
        context.bindTexture(3553 /* WebGLRenderingContext.TEXTURE_2D */, null);
        this.set_Width((img.naturalWidth | 0));
        this.set_Height((img.naturalHeight | 0));
        if (this.OnLoaded != null)
            this.OnLoaded(this);
    };
    $p.Bind = function Texture_Bind(context, target) {
        context.activeTexture(target);
        context.bindTexture(3553 /* WebGLRenderingContext.TEXTURE_2D */, this.texture);
    };
});
WebGLHelper.Utils = $d.declare("WebGLHelper.Utils", System.Object, 0, $asm, function($t, $p) {
    $t.CreateWebGL = function Utils_CreateWebGL(canvas, context) {
        var result = null;
        var names = $d.array(String, ["webgl", "experimental-webgl", "webkit-3d", "moz-webgl"]);
        for (var $i = 0, $length = names.length; $i != $length; $i++) {
            var name = names[$i];
            try {
                result = canvas.getContext(name, "{preserveDrawingBuffer:true}");
            }
            catch ($e) {}

            if (result != null)
                break;
        }
        return result;
    };
    $t.CreateShaderFromScriptElement = function Utils_CreateShaderFromScriptElement(gl, scriptId) {
        var shaderScript = $d.cast(document.getElementById(scriptId), HTMLScriptElement);

        if (shaderScript == null)
            throw new System.Exception.ctor$1("unknown script element " + scriptId);

        var shaderSource = shaderScript.text;

        // Now figure out what type of shader script we have, based on its MIME type
        var shaderType = (shaderScript.type == "x-shader/x-fragment") ? 35632 /* WebGLRenderingContext.FRAGMENT_SHADER */ : (shaderScript.type == "x-shader/x-vertex") ? 35633 /* WebGLRenderingContext.VERTEX_SHADER */ : 0;
        if (shaderType == 0)
            throw new System.Exception.ctor$1("unknown shader type");

        var shader = gl.createShader(shaderType);
        gl.shaderSource(shader, shaderSource);

        // Compile the shader program
        gl.compileShader(shader);

        // See if it compiled successfully
        if (!gl.getShaderParameter(shader, 35713 /* WebGLRenderingContext.COMPILE_STATUS */)) {
            // Something went wrong during compilation; get the error
            var errorInfo = gl.getShaderInfoLog(shader);
            gl.deleteShader(shader);
            throw new System.Exception.ctor$1("error compiling shader '" + $d.toString(shader) + "': " + errorInfo);
        }
        return shader;
    };
    $t.CreateShaderProgram = function Utils_CreateShaderProgram(gl, fragmentShader, vertexShader) {
        var shaderProgram = gl.createProgram();
        gl.attachShader(shaderProgram, vertexShader);
        gl.attachShader(shaderProgram, fragmentShader);
        gl.linkProgram(shaderProgram);

        var linkStatus = gl.getProgramParameter(shaderProgram, 35714 /* WebGLRenderingContext.LINK_STATUS */);
        if (!linkStatus)
            throw new System.Exception.ctor$1("failed to link shader");
        return shaderProgram;
    };
});
WebGLHelper.Vector2 = $d.declare("WebGLHelper.Vector2", null, 62, $asm, function($t, $p) {
    $t.cctor = function() {
        $t.GLVector2 = vec2;
    };
    $t.ctor = function Vector2() {
        this.x = 0;
        this.y = 0;
    };
    $t.ctor.prototype = $p;
    $p.get_Magnitude = function Vector2_get_Magnitude() {
        return Math.sqrt(this.x * this.x + this.y * this.y);
    };
    $p.get_Normalized = function Vector2_get_Normalized() {
        var m = this.get_Magnitude();
        return WebGLHelper.Vector2.op_Division(this, m);
    };
    $t.ctor$1 = function Vector2(x, y) {
        this.x = x;
        this.y = y;
    };
    $t.ctor$1.prototype = $p;
    $p.Rotated = function Vector2_Rotated(angle) {
        var rad = Math.PI * angle / 180;
        var cs = Math.cos(rad);
        var sn = Math.sin(rad);
        return new WebGLHelper.Vector2.ctor$1(this.x * cs - this.y * sn, this.x * sn + this.y * cs);
    };
    $p.Transformed = function Vector2_Transformed(matrix) {
        var res = $d.array(System.Single, 2);
        $t().GLVector2.transformMat3(res, $d.array(System.Single, [this.x, this.y]), matrix.mat);
        return new WebGLHelper.Vector2.ctor$1(res[0], res[1]);
    };
    $t.op_Multiply$1 = function Vector2_op_Multiply$1(v, f) {
        return new WebGLHelper.Vector2.ctor$1(v.x * f, v.y * f);
    };
    $t.op_Multiply = function Vector2_op_Multiply(a, b) {
        return new WebGLHelper.Vector2.ctor$1(a.x * b.x, a.y * b.y);
    };
    $t.op_Division = function Vector2_op_Division(v, f) {
        return new WebGLHelper.Vector2.ctor$1(v.x / f, v.y / f);
    };
    $t.op_Addition = function Vector2_op_Addition(v1, v2) {
        return new WebGLHelper.Vector2.ctor$1(v1.x + v2.x, v1.y + v2.y);
    };
    $t.op_Subtraction = function Vector2_op_Subtraction(v1, v2) {
        return new WebGLHelper.Vector2.ctor$1(v1.x - v2.x, v1.y - v2.y);
    };
    $t.Dot = function Vector2_Dot(v1, v2) {
        return v1.x * v2.x + v1.y * v2.y;
    };
    $p.ToString = function Vector2_ToString() {
        return String.Format("[{0}, {1}]", $d.array(System.Object, [this.x, this.y]));
    };
});
WebGLHelper.Vector3 = $d.declare("WebGLHelper.Vector3", null, 62, $asm, function($t, $p) {
    $t.cctor = function() {
        $t.GLVector3 = vec3;
    };
    $t.ctor = function Vector3() {
        this.x = 0;
        this.y = 0;
        this.z = 0;
    };
    $t.ctor.prototype = $p;
    $p.get_Magnitude = function Vector3_get_Magnitude() {
        return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
    };
    $p.get_Normalized = function Vector3_get_Normalized() {
        var m = this.get_Magnitude();
        return WebGLHelper.Vector3.op_Division(this, m);
    };
    $t.ctor$4 = function Vector3(x, y, z) {
        this.x = x;
        this.y = y;
        this.z = z;
    };
    $t.ctor$4.prototype = $p;
    $t.ctor$2 = function Vector3(v, z) {
        this.x = v.x;
        this.y = v.y;
        this.z = z;
    };
    $t.ctor$2.prototype = $p;
    $t.ctor$3 = function Vector3(x, v) {
        this.x = x;
        this.y = v.x;
        this.z = v.y;
    };
    $t.ctor$3.prototype = $p;
    $t.ctor$1 = function Vector3(v) {
        this.x = v.x;
        this.y = v.y;
        this.z = 0;
    };
    $t.ctor$1.prototype = $p;
    $t.op_Multiply = function Vector3_op_Multiply(v, f) {
        return new WebGLHelper.Vector3.ctor$4(v.x * f, v.y * f, v.z * f);
    };
    $t.op_Division = function Vector3_op_Division(v, f) {
        return new WebGLHelper.Vector3.ctor$4(v.x / f, v.y / f, v.z / f);
    };
    $t.op_Addition = function Vector3_op_Addition(v1, v2) {
        return new WebGLHelper.Vector3.ctor$4(v1.x + v2.x, v1.y + v2.y, v1.z + v2.z);
    };
    $t.op_Subtraction = function Vector3_op_Subtraction(v1, v2) {
        return new WebGLHelper.Vector3.ctor$4(v1.x - v2.x, v1.y - v2.y, v1.z - v2.z);
    };
    $t.Dot = function Vector3_Dot(v1, v2) {
        return v1.x * v2.x + v1.y * v2.y + v1.z * v2.z;
    };
    $t.Cross = function Vector3_Cross(v1, v2) {
        return new WebGLHelper.Vector3.ctor$4(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);
    };
});
return $asm;
})();
//# sourceMappingURL=WebGLHelper.js.map
