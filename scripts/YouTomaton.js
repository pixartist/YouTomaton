//
// YouTomaton, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
//
// Generated by DuoCode Compiler 0.4.1089.0 beta
//
(function YouTomaton() {
"use strict";
var $asm = {
    fullName: "YouTomaton",
    anonymousTypes: [],
    types: [],
    $getAttrs: function() { return [new System.Reflection.AssemblyTitleAttribute.ctor("HelloDuoCode"), new System.Reflection.AssemblyDescriptionAttribute.ctor(""), new System.Reflection.AssemblyConfigurationAttribute.ctor(""), new System.Reflection.AssemblyCompanyAttribute.ctor(""), new System.Reflection.AssemblyProductAttribute.ctor("HelloDuoCode"), new System.Reflection.AssemblyCopyrightAttribute.ctor("Copyright \xA9  2015"), new System.Reflection.AssemblyTrademarkAttribute.ctor(""), new System.Reflection.AssemblyCultureAttribute.ctor(""), new System.Reflection.AssemblyVersionAttribute.ctor("1.0.0.0"), new System.Reflection.AssemblyFileVersionAttribute.ctor("1.0.0.0"), new DuoCode.Runtime.CompilerAttribute.ctor("0.4.1089.0 beta")]; }
};
var $g = (typeof(global) !== "undefined" ? global : window);
var YouTomaton = $g.YouTomaton = $g.YouTomaton || {};
var $d = DuoCode.Runtime;
$d.$assemblies["YouTomaton"] = $asm;
YouTomaton.PingPongShader = $d.declare("YouTomaton.PingPongShader", System.Object, 0, $asm, function($t, $p) {
    $t.$ator = function() {
        this.id = 0;
        this.at = 0;
        this.shader = null;
        this.targets = null;
        this.bSize = 0;
        this.lastError = null;
        this.enabled = false;
        this.paintingEnabled = false;
        this.initWithNoise = false;
        this.repetitions = 1;
        this.clearEachFrame = false;
        this.paintColor = new WebGLHelper.Vector3.ctor();
        this.fragmentCode = "";
    };
    $t.ctor = function PingPongShader(defaultSize, id) {
        $t.$baseType.ctor.call(this);
        this.paintColor = new WebGLHelper.Vector3.ctor$4(1, 1, 1);
        this.enabled = false;
        this.paintingEnabled = true;
        this.initWithNoise = false;
        this.clearEachFrame = false;
        this.id = id;
        this.bSize = defaultSize;
        this.targets = $d.array(WebGLHelper.Surface, 2);
        this.targets[0] = new WebGLHelper.Surface.ctor$2(WebGLHelper.Program().get_Context(), this.bSize, 
            this.bSize, 5126 /* WebGLRenderingContext.FLOAT */, 9728 /* WebGLRenderingContext.NEAREST */);
        this.targets[1] = new WebGLHelper.Surface.ctor$2(WebGLHelper.Program().get_Context(), this.bSize, 
            this.bSize, 5126 /* WebGLRenderingContext.FLOAT */, 9728 /* WebGLRenderingContext.NEAREST */);
    };
    $t.ctor.prototype = $p;
    $p.Compile = function PingPongShader_Compile(prefix, initTex, copyShader, message) {
        var success = true;
        message.value = "Success";
        if (this.fragmentCode != null) {
            var oldShader = this.shader;
            try {

                this.shader = WebGLHelper.Shader.CreateShaderProgramFromStrings(WebGLHelper.Program().get_Context(), 
                    YouTomaton.Shaders().VertexShader, prefix + System.Environment().NewLine + this.fragmentCode);
                if (this.initWithNoise) {
                    this.targets[0].BindFramebuffer();
                    WebGLHelper.Program().get_Context().viewport(0, 0, (this.bSize | 0), (this.bSize | 0));
                    WebGLHelper.Program().get_Context().clearColor(0, 0, 0, 0);
                    WebGLHelper.Program().get_Context().clear(16640 /* GL.COLOR_BUFFER_BIT | GL.DEPTH_BUFFER_BIT */);
                    initTex.Bind(WebGLHelper.Program().get_Context(), 33984);
                    YouTomaton.Main.DrawQuad(copyShader);
                    this.targets[1].BindFramebuffer();
                    WebGLHelper.Program().get_Context().viewport(0, 0, (this.bSize | 0), (this.bSize | 0));
                    WebGLHelper.Program().get_Context().clearColor(0, 0, 0, 0);
                    WebGLHelper.Program().get_Context().clear(16640 /* GL.COLOR_BUFFER_BIT | GL.DEPTH_BUFFER_BIT */);
                    initTex.Bind(WebGLHelper.Program().get_Context(), 33984);
                    YouTomaton.Main.DrawQuad(copyShader);
                    WebGLHelper.Program().get_Context().bindFramebuffer(36160 /* WebGLRenderingContext.FRAMEBUFFER */, 
                        null);
                }
            }
            catch ($e) {
                $e = System.Exception.Wrap($e);
                this.shader = oldShader;
                message.value = $e.get_Message();
                success = false;
            }

        }
        else {
            this.shader = null;
            message.value = "No code provided";
            success = false;
        }
        return success;
    };
    $p.Flip = function PingPongShader_Flip(s) {
        this.at = 1 - this.at;
        s.SetInt("uSampler", $d.array(System.Int32, [0]));
        this.targets[1 - this.at].Bind(33984 /* WebGLRenderingContext.TEXTURE0 */);
        this.targets[this.at].BindFramebuffer();
        WebGLHelper.Program().get_Context().viewport(0, 0, (this.bSize | 0), (this.bSize | 0));
        WebGLHelper.Program().get_Context().clearColor(0, 0, 0, 0);
        WebGLHelper.Program().get_Context().clear(16640 /* GL.COLOR_BUFFER_BIT | GL.DEPTH_BUFFER_BIT */);
        YouTomaton.Main.DrawQuad(s);
        WebGLHelper.Program().get_Context().bindFramebuffer(36160 /* WebGLRenderingContext.FRAMEBUFFER */, 
            null);
    };
    $p.Tick = function PingPongShader_Tick(time) {
        if (this.shader != null && YouTomaton.Main().layers != null && this.repetitions > 0 && this.enabled) {
            var mp = YouTomaton.Main.Screen2Shader(WebGLHelper.Input().get_MousePosition(), this.bSize);
            WebGLHelper.Program().get_Context().viewport(0, 0, (this.bSize | 0), (this.bSize | 0));
            for (var i = 0; i < this.repetitions; i++) {
                this.shader.Use();
                this.at = 1 - this.at;
                this.shader.SetInt("layer" + $d.toString(this.id), $d.array(System.Int32, [this.id]));
                this.targets[1 - this.at].Bind(33984 /* WebGLRenderingContext.TEXTURE0 */ + this.id);
                this.targets[this.at].BindFramebuffer();

                var l = 0;
                for (l = 0; l < YouTomaton.Main().MaxLayers; l++) {
                    if (l != this.id) {
                        if (YouTomaton.Main().layers[l] != null && YouTomaton.Main().layers[l].enabled) {
                            this.shader.SetInt("layer" + $d.toString(l), $d.array(System.Int32, [l]));
                            YouTomaton.Main().layers[l].BindTexture(33984 /* WebGLRenderingContext.TEXTURE0 */ + l);
                        }
                        else {
                            WebGLHelper.Program().get_Context().activeTexture(33984 /* WebGLRenderingContext.TEXTURE0 */ + l);
                            WebGLHelper.Program().get_Context().bindTexture(3553 /* WebGLRenderingContext.TEXTURE_2D */, 
                                null);
                        }
                    }
                }
                this.shader.SetInt("noise", $d.array(System.Int32, [l]));
                YouTomaton.Main().noiseTex.Bind(WebGLHelper.Program().get_Context(), 33984 /* WebGLRenderingContext.TEXTURE0 */ + l);
                this.shader.SetFloat("uTime", $d.array(System.Single, [time]));
                this.shader.SetFloat("uResolution", $d.array(System.Single, [this.bSize, this.bSize]));
                WebGLHelper.Program().get_Context().clearColor(0, 0, 0, 0);

                WebGLHelper.Program().get_Context().clear(16640 /* GL.COLOR_BUFFER_BIT | GL.DEPTH_BUFFER_BIT */);
                YouTomaton.Main.DrawQuad(this.shader);
                WebGLHelper.Program().get_Context().bindFramebuffer(36160 /* WebGLRenderingContext.FRAMEBUFFER */, 
                    null);
            }
        }
    };
    $p.BindTexture = function PingPongShader_BindTexture(target) {
        this.targets[this.at].Bind(target);
    };
    $p.Clear = function PingPongShader_Clear() {
        this.targets[0].Clear();
        this.targets[1].Clear();
    };
    $p.LoadFrom = function PingPongShader_LoadFrom(info) {
        this.repetitions = 1;
        this.clearEachFrame = false;
        this.fragmentCode = info.fragmentShader;
        this.enabled = info.enabled;
        this.paintColor = info.paintColor;
        this.paintingEnabled = info.paintingEnabled;
        this.initWithNoise = info.initWithNoise;
        if (undefined != info.repetitions)
            this.repetitions = info.repetitions;
        if (undefined != this.clearEachFrame)
            this.clearEachFrame = info.clearEachFrame;
    };
});
YouTomaton.ShaderInfo = $d.declare("YouTomaton.ShaderInfo", null, 62, $asm, function($t, $p) {
    $t.ctor = function ShaderInfo() {
        this.fragmentShader = null;
        this.paintColor = new WebGLHelper.Vector3.ctor();
        this.enabled = false;
        this.paintingEnabled = false;
        this.initWithNoise = false;
        this.repetitions = 0;
        this.clearEachFrame = false;
    };
    $t.ctor.prototype = $p;
    $t.ctor$2 = function ShaderInfo(fragmentShader, paintColor, enabled, paintingEnabled, initWithNoise, repetitions, clearEachFrame) {
        this.fragmentShader = fragmentShader;
        this.paintColor = paintColor;
        this.enabled = enabled;
        this.paintingEnabled = paintingEnabled;
        this.initWithNoise = initWithNoise;
        this.repetitions = repetitions;
        this.clearEachFrame = clearEachFrame;
    };
    $t.ctor$2.prototype = $p;
    $t.ctor$1 = function ShaderInfo(shader) {
        this.fragmentShader = shader.fragmentCode;
        this.paintColor = shader.paintColor;
        this.enabled = shader.enabled;
        this.paintingEnabled = shader.paintingEnabled;
        this.initWithNoise = shader.initWithNoise;
        this.repetitions = shader.repetitions;
        this.clearEachFrame = shader.clearEachFrame;
    };
    $t.ctor$1.prototype = $p;
});
YouTomaton.ProgramInfo = $d.declare("YouTomaton.ProgramInfo", null, 62, $asm, function($t, $p) {
    $t.ctor = function ProgramInfo() {
        this.layer0 = new YouTomaton.ShaderInfo.ctor();
        this.layer1 = new YouTomaton.ShaderInfo.ctor();
        this.layer2 = new YouTomaton.ShaderInfo.ctor();
        this.layer3 = new YouTomaton.ShaderInfo.ctor();
        this.layer4 = new YouTomaton.ShaderInfo.ctor();
        this.layer5 = new YouTomaton.ShaderInfo.ctor();
        this.layer6 = new YouTomaton.ShaderInfo.ctor();
        this.layer7 = new YouTomaton.ShaderInfo.ctor();
        this.finalShader = null;
    };
    $t.ctor.prototype = $p;
    $t.ctor$1 = function ProgramInfo(layers, finalShader) {
        this.layer0 = new YouTomaton.ShaderInfo.ctor$1(layers[0]);
        this.layer1 = new YouTomaton.ShaderInfo.ctor$1(layers[1]);
        this.layer2 = new YouTomaton.ShaderInfo.ctor$1(layers[2]);
        this.layer3 = new YouTomaton.ShaderInfo.ctor$1(layers[3]);
        this.layer4 = new YouTomaton.ShaderInfo.ctor$1(layers[4]);
        this.layer5 = new YouTomaton.ShaderInfo.ctor$1(layers[5]);
        this.layer6 = new YouTomaton.ShaderInfo.ctor$1(layers[6]);
        this.layer7 = new YouTomaton.ShaderInfo.ctor$1(layers[7]);
        this.finalShader = finalShader;
    };
    $t.ctor$1.prototype = $p;
});
YouTomaton.Main = $d.declare("YouTomaton.Main", WebGLHelper.Program, 0, $asm, function($t, $p) {
    $t.cctor = function() {
        $t.MaxLayers = 8;
        $t.layers = null;
        $t.noiseTex = null;
        $t.finalShaderFragment = null;
        $t.lastError = null;
        $t.zoom = 0;
        $t.position = new WebGLHelper.Vector2.ctor();
        $t.paused = false;
        $t.instance = null;
        $t.defaultSize = 1024;
    };
    $t.$ator = function() {
        this.time = 0;
        this.editor = null;
        this.finalShader = null;
        this.paintShader = null;
        this.copyShader = null;
        this.quad = $d.array(System.Single, [-1, -1, 1, -1, -1, 1, -1, 1, 1, -1, 1, 1]);
        this.texCoords = $d.array(System.Single, [0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1]);
        this.vBuffer = null;
        this.tBuffer = null;
        this.elements = null;
        this.canRender = false;
        this.brushRadius = 0.02;
        this.canPaint = false;
        this.colorMode = 0;
    };
    $t.get_CurrentImage = function Main_get_CurrentImage() {
        var buf = new Uint8Array($t.$baseType().get_Width() * $t.$baseType().get_Height() * 4);
        $t.$baseType().get_Context().readPixels(0, 0, $t.$baseType().get_Width(), $t.$baseType().get_Height(), 
            6408 /* WebGLRenderingContext.RGBA */, 5121 /* WebGLRenderingContext.UNSIGNED_BYTE */, buf);
        return buf;
    };
    $t.get_CurrentProgram = function Main_get_CurrentProgram() {
        $t().instance.Compile(null);
        return JSON.stringify(new YouTomaton.ProgramInfo.ctor$1($t().layers, $t().finalShaderFragment));
    };
    $t.set_CurrentProgram = function Main_set_CurrentProgram(value) {

        var i = value;
        $t().layers[0].LoadFrom(i.layer0);
        $t().layers[1].LoadFrom(i.layer1);
        $t().layers[2].LoadFrom(i.layer2);
        $t().layers[3].LoadFrom(i.layer3);
        $t().layers[4].LoadFrom(i.layer4);
        $t().layers[5].LoadFrom(i.layer5);
        $t().layers[6].LoadFrom(i.layer6);
        $t().layers[7].LoadFrom(i.layer7);

        $t().instance.set_SelectedLayer(-2);
        $t().instance.SelectLayer$1(-1);
        $t().instance.set_FragmentCode(i.finalShader);
        $t().instance.Compile(null);
        return value;
    };
    $p.get_FragmentCode = function Main_get_FragmentCode() {
        return this.editor.getValue();
    };
    $p.set_FragmentCode = function Main_set_FragmentCode(value) {
        this.editor.setValue(value);
        return value;
    };
    $p.get_ErrorConsole = function Main_get_ErrorConsole() {
        return this.Id$1(HTMLPreElement, "console");
    };
    $p.get_ColorSelector = function Main_get_ColorSelector() {
        return this.Id$1(HTMLInputElement, "colorSelect");
    };
    $p.get_EnabledCheckbox = function Main_get_EnabledCheckbox() {
        return this.Id$1(HTMLInputElement, "enabled");
    };
    $p.get_PaintingEnabledCheckbox = function Main_get_PaintingEnabledCheckbox() {
        return this.Id$1(HTMLInputElement, "painting");
    };
    $p.get_ClearEachFrameCheckbox = function Main_get_ClearEachFrameCheckbox() {
        return this.Id$1(HTMLInputElement, "clearEachFrame");
    };
    $p.get_RepetitionsTextbox = function Main_get_RepetitionsTextbox() {
        return this.Id$1(HTMLInputElement, "repetition");
    };
    $p.get_InitWithNoiseCheckbox = function Main_get_InitWithNoiseCheckbox() {
        return this.Id$1(HTMLInputElement, "initNoise");
    };
    $p.get_SelectedLayer = function Main_get_SelectedLayer() {
        return System.Int32.Parse(this.Id$1(HTMLInputElement, "selectedLayer").value);
    };
    $p.set_SelectedLayer = function Main_set_SelectedLayer(value) {
        this.Id$1(HTMLInputElement, "selectedLayer").value = value.ToString();
        return value;
    };
    $p.get_ShaderMX = function Main_get_ShaderMX() {
        return (WebGLHelper.Input().get_MousePosition().x) / (1024 /* Main.defaultSize */ * $t().zoom) + $t().position.x / window.innerWidth;
    };
    $p.get_ShaderMY = function Main_get_ShaderMY() {
        return ($t.$baseType().get_Height() - WebGLHelper.Input().get_MousePosition().y) / (1024 /* Main.defaultSize */ * $t().zoom) + $t().position.y / window.innerHeight;
    };
    $t.ctor = function Main() {
        $t.$baseType.ctor.call(this);
        this.elements = new (System.Collections.Generic.Dictionary$2(String, HTMLElement).ctor)();
        $t().instance = this;
    };
    $t.ctor.prototype = $p;
    $t.Run = function Main_Run(editor, canvas, context) {
        var m = new YouTomaton.Main.ctor();
        m.editor = editor;
        canvas.id = "canvas";
        m.Id("canvasContainer").appendChild(canvas);
        WebGLHelper.Program.Run(canvas, context, m);
    };
    $p.OnCreate = function Main_OnCreate() {
        window.onresize = $d.delegate(this.Resize, this);
        $t().noiseTex = new WebGLHelper.Texture.ctor($t.$baseType().get_Context(), "noise.png");
        var ext = $t.$baseType().get_Context().getExtension("OES_texture_float");
        this.canPaint = false;
        $t().zoom = 1;
        $t().position = new WebGLHelper.Vector2.ctor$1(0, 0);
        $t().paused = false;
        $t().layers = $d.array(YouTomaton.PingPongShader, $t().MaxLayers);
        for (var i = 0; i < $t().MaxLayers; i++) {
            $t().layers[i] = new YouTomaton.PingPongShader.ctor(1024 /* Main.defaultSize */, i);
        }
        $t().layers[0].fragmentCode = YouTomaton.Shaders().Frag0;
        $t().layers[1].fragmentCode = YouTomaton.Shaders().Frag1;
        $t().layers[0].enabled = true;
        this.paintShader = WebGLHelper.Shader.CreateShaderProgramFromStrings($t.$baseType().get_Context(), 
            YouTomaton.Shaders().VertexShader, YouTomaton.Shaders().PaintShader);
        this.copyShader = WebGLHelper.Shader.CreateShaderProgramFromStrings($t.$baseType().get_Context(), 
            YouTomaton.Shaders().FinalVertexShader, YouTomaton.Shaders().PaintShader);
        $t().finalShaderFragment = "\r\nuniform sampler2D layer0;\r\nuniform sampler2D layer1;\r\nuniform sampler2D layer2;\r\nuniform sampler2D layer3;\r\nuniform sampler2D layer4;\r\nuniform sampler2D layer5;\r\nuniform sampler2D layer6;\r\nuniform sampler2D layer7;\r\nvarying vec2 vTextureCoord;\r\nvoid main(void) {\r\n    gl_FragColor = texture2D(layer0, vTextureCoord);\r\n}";
        WebGLHelper.Program.SetCanvasSize(1024 /* Main.defaultSize */, 1024 /* Main.defaultSize */);
        this.vBuffer = new WebGLHelper.GLBufferF.ctor(34962, 35044);
        this.vBuffer.components = 2;
        this.vBuffer.SetData(this.quad);
        this.vBuffer.UpdateBuffer();

        this.tBuffer = new WebGLHelper.GLBufferF.ctor(34962, 35044);
        this.tBuffer.components = 2;
        this.tBuffer.SetData(this.texCoords);
        this.tBuffer.UpdateBuffer();
        this.SetupControls();
        $t.$baseType().get_Context().enable(3042 /* WebGLRenderingContext.BLEND */);
        $t.$baseType().get_Context().blendFunc(770 /* WebGLRenderingContext.SRC_ALPHA */, 771 /* WebGLRenderingContext.ONE_MINUS_SRC_ALPHA */);
        $t.$baseType().get_Context().disable(2929 /* WebGLRenderingContext.DEPTH_TEST */);
        this.Resize(null);
    };
    $p.SetupControls = function Main_SetupControls() {
        for (var i = -1; i < $t().MaxLayers; i++) {
            this.Id(i.ToString()).onclick = $d.delegate(this.SelectLayer, this);
        }


        this.get_ColorSelector().onchange = $d.delegate(this.ColorChanged, this);
        //ColorSelector.value = "#ffffff";

        this.get_PaintingEnabledCheckbox().onclick = $d.delegate(this.TogglePaintingEnabled, this);
        this.get_ClearEachFrameCheckbox().onclick = $d.delegate(this.ToggleClearEachFrame, this);
        this.get_InitWithNoiseCheckbox().onclick = $d.delegate(this.ToggleInitWithNoise, this);
        this.get_RepetitionsTextbox().onchange = $d.delegate(this.ChangeRepetitions, this);
        // PaintingEnabledCheckbox.click();

        this.get_EnabledCheckbox().onclick = $d.delegate(this.ToggleLayer, this);
        //EnabledCheckbox.click();

        this.Id$1(HTMLButtonElement, "run").onclick = $d.delegate(this.Compile, this);
        this.Click$1("clear", $d.delegate(function() {
            for (var i = 0; i < $t().MaxLayers; i++) {
                $t().layers[i].Clear();
            }
        }, this));
        $t.$baseType().get_Canvas().onmouseenter = $d.delegate(function(e) {
            this.canPaint = true;
            return true;
        }, this);
        $t.$baseType().get_Canvas().onmouseleave = $d.delegate(function(e) {
            this.canPaint = false;
            return true;
        }, this);
        $t.$baseType().get_Canvas().onselectstart = $d.delegate(function(e) {
            return false;
        }, this);
        $t.$baseType().get_Canvas().onmousedown = $d.delegate(function(e) {
            return false;
        }, this);
        this.Id("import").onclick = $d.delegate(this.Import, this);
        this.Id("0").click();
        this.Id("run").click();
    };
    $p.Resize = function Main_Resize(e) {
        var wi = ((window.innerWidth * 0.6) | 0);
        var hi = ((window.innerHeight) | 0);
        var w = $d.toString(wi) + "px";
        this.Id("canvasContainer").style.setProperty("width", w);
        this.Id("controls").style.setProperty("margin-left", w);
        this.Class("CodeMirror cm-s-default").style.setProperty("height", $d.toString((hi / 2 | 0)) + "px");
        this.Id("console").style.setProperty("height", $d.toString(((hi * 0.25) | 0)) + "px");
        WebGLHelper.Program.SetCanvasSize(wi - 60, hi - 160);
        return true;
    };
    $p.Import = function Main_Import(e) {
        this.Id$1(HTMLInputElement, "selectedLayer").value = "-2";
        var json = window.prompt("Paste Json", "");
        System.Console.WriteLine$10("parsing: " + json);
        var inf = JSON.parse(json);
        $t().layers[0].LoadFrom(inf.layer0);
        $t().layers[1].LoadFrom(inf.layer1);
        $t().layers[2].LoadFrom(inf.layer2);
        $t().layers[3].LoadFrom(inf.layer3);
        $t().layers[4].LoadFrom(inf.layer4);
        $t().layers[5].LoadFrom(inf.layer5);
        $t().layers[6].LoadFrom(inf.layer6);
        $t().layers[7].LoadFrom(inf.layer7);
        this.set_FragmentCode(inf.finalShader);
        this.Id("0").click();
        this.Id("run").click();
        return true;
    };
    $p.Compile = function Main_Compile(e) {
        if (this.get_SelectedLayer() >= 0 && $t().layers[this.get_SelectedLayer()] != null) {
            $t().layers[this.get_SelectedLayer()].fragmentCode = this.get_FragmentCode();
        }
        else
            if (this.get_SelectedLayer() == -1) {
                $t().finalShaderFragment = this.get_FragmentCode();
            }

        var oldFinal = this.finalShader;
        try {


            for (var i = 0; i < $t().MaxLayers; i++) {
                if ($t().layers[i].enabled) {
                    $t().layers[i].lastError = "Compiled successfully";
                    var msg = {};
                    if (!$t().layers[i].Compile(YouTomaton.Shaders().Prex, $t().noiseTex, this.copyShader, 
                        msg)) {
                        $t().layers[i].lastError = msg.value;

                        this.Id(i.ToString()).style.backgroundColor = "red";
                        System.Console.WriteLine$10("Failed to compile layer " + $d.toString(i) + ": " + msg.value);
                    }
                    if (i == this.get_SelectedLayer()) {
                        this.get_ErrorConsole().textContent = $t().layers[i].lastError;
                    }
                }
            }
            $t().lastError = "Compiled successfully";
            // System.Console.WriteLine("Compiling: vert: " + VertexShader + Environment.NewLine + "frag: " + Prex + finalShaderFragment);
            this.finalShader = WebGLHelper.Shader.CreateShaderProgramFromStrings($t.$baseType().get_Context(), 
                YouTomaton.Shaders().FinalVertexShader, YouTomaton.Shaders().Prex + $t().finalShaderFragment);
            this.canRender = true;
        }
        catch ($e) {
            $e = System.Exception.Wrap($e);
            $t().lastError = $e.get_Message();
            this.Id("-1").style.backgroundColor = "red";

            System.Console.WriteLine$10("Failed to compile final shader: " + $e.get_Message());
            this.finalShader = oldFinal;
        }

        if (-1 == this.get_SelectedLayer()) {
            this.get_ErrorConsole().textContent = $t().lastError;
        }
        this.time = 0;
        return true;
    };
    $p.SetColor = function Main_SetColor(layer) {
        var r = parseInt(this.get_ColorSelector().value.Substring$1(1, 2), 16) / 255;
        var g = parseInt(this.get_ColorSelector().value.Substring$1(3, 2), 16) / 255;
        var b = parseInt(this.get_ColorSelector().value.Substring$1(5, 2), 16) / 255;
        $t().layers[layer].paintColor = new WebGLHelper.Vector3.ctor$4(r, g, b);
    };
    $p.GetColor = function Main_GetColor(layer) {
        return "#" + (($t().layers[layer].paintColor.x * 255) | 0).ToString$1("X2") + (($t().layers[layer].paintColor.y * 255) | 0).ToString$1("X2") + (($t().layers[layer].paintColor.z * 255) | 0).ToString$1("X2");
    };
    $p.ColorChanged = function Main_ColorChanged(e) {

        this.SetColor(this.get_SelectedLayer());
        return true;
    };
    $p.ToggleInitWithNoise = function Main_ToggleInitWithNoise(e) {
        if (this.get_SelectedLayer() == -1) {
            this.get_InitWithNoiseCheckbox().checked = true;
        }
        else
            if (this.get_SelectedLayer() >= 0) {
                $t().layers[this.get_SelectedLayer()].initWithNoise = this.get_InitWithNoiseCheckbox().checked;
            }
        return true;
    };
    $p.TogglePaintingEnabled = function Main_TogglePaintingEnabled(e) {
        if (this.get_SelectedLayer() == -1) {
            this.get_PaintingEnabledCheckbox().checked = true;
        }
        else
            if (this.get_SelectedLayer() >= 0) {
                $t().layers[this.get_SelectedLayer()].paintingEnabled = this.get_PaintingEnabledCheckbox().checked;
            }
        return true;
    };
    $p.ToggleClearEachFrame = function Main_ToggleClearEachFrame(e) {
        if (this.get_SelectedLayer() == -1) {
            this.get_ClearEachFrameCheckbox().checked = true;
        }
        else
            if (this.get_SelectedLayer() >= 0) {
                $t().layers[this.get_SelectedLayer()].clearEachFrame = this.get_ClearEachFrameCheckbox().checked;
            }
        return true;
    };
    $p.ChangeRepetitions = function Main_ChangeRepetitions(e) {
        if (this.get_SelectedLayer() == -1) {
            this.get_RepetitionsTextbox().value = "1";
        }
        else
            if (this.get_SelectedLayer() >= 0) {
                this.SetRepetitions(this.get_SelectedLayer(), this.get_RepetitionsTextbox().value);
            }
        return true;
    };
    $p.SetRepetitions = function Main_SetRepetitions(layer, s) {
        var rep = {};
        if (System.Int32.TryParse(s, rep)) {
            $t().layers[layer].repetitions = rep.value;
        }
    };
    $p.ToggleLayer = function Main_ToggleLayer(e) {

        if (this.get_SelectedLayer() == -1) {
            this.get_EnabledCheckbox().checked = true;
        }
        else
            if (this.get_SelectedLayer() >= 0) {
                $t().layers[this.get_SelectedLayer()].enabled = this.get_EnabledCheckbox().checked;
            }
        return true;
    };
    $p.SelectLayer$1 = function Main_SelectLayer(id) {
        if (this.get_SelectedLayer() >= -1) {
            if (this.get_SelectedLayer() >= 0) {
                $t().layers[this.get_SelectedLayer()].fragmentCode = this.get_FragmentCode();
                $t().layers[this.get_SelectedLayer()].paintingEnabled = this.get_PaintingEnabledCheckbox().checked;
                $t().layers[this.get_SelectedLayer()].clearEachFrame = this.get_ClearEachFrameCheckbox().checked;
                $t().layers[this.get_SelectedLayer()].initWithNoise = this.get_InitWithNoiseCheckbox().checked;
                this.SetRepetitions(this.get_SelectedLayer(), this.get_RepetitionsTextbox().value);
                this.SetColor(this.get_SelectedLayer());
            }
            else {
                $t().finalShaderFragment = this.get_FragmentCode();
            }
            this.Id(this.get_SelectedLayer().ToString()).style.backgroundColor = "#303030";
        }
        this.set_SelectedLayer(id);

        this.Id(id.ToString()).style.backgroundColor = "#505050";
        if (this.get_SelectedLayer() >= 0) {
            this.get_EnabledCheckbox().checked = $t().layers[this.get_SelectedLayer()].enabled;
            this.get_PaintingEnabledCheckbox().checked = $t().layers[this.get_SelectedLayer()].paintingEnabled;
            this.get_ClearEachFrameCheckbox().checked = $t().layers[this.get_SelectedLayer()].clearEachFrame;
            this.get_RepetitionsTextbox().value = $t().layers[this.get_SelectedLayer()].repetitions.ToString();
            this.get_InitWithNoiseCheckbox().checked = $t().layers[this.get_SelectedLayer()].initWithNoise;
            this.set_FragmentCode($t().layers[this.get_SelectedLayer()].fragmentCode);
            this.get_ColorSelector().value = this.GetColor(this.get_SelectedLayer());
            this.get_ErrorConsole().textContent = $t().layers[this.get_SelectedLayer()].lastError;
        }
        else
            if (this.get_SelectedLayer() == -1) {
                this.get_EnabledCheckbox().checked = true;
                //FragmentCode.disabled = false;
                this.get_PaintingEnabledCheckbox().checked = false;
                this.get_ClearEachFrameCheckbox().checked = false;
                this.get_InitWithNoiseCheckbox().checked = false;
                this.get_RepetitionsTextbox().value = "1";
                this.set_FragmentCode($t().finalShaderFragment);
                this.get_ErrorConsole().textContent = $t().lastError;
            }

        return true;
    };
    $p.SelectLayer = function Main_SelectLayer(e) {

        this.SelectLayer$1(System.Int32.Parse(($d.cast(e.srcElement, HTMLSpanElement)).id));
        return true;
    };
    $p.OnRender = function Main_OnRender(t, dt) {
        this.time += dt;
        if (this.canRender) {
            for (var i = 0; i < $t().MaxLayers; i++) {
                $t().layers[i].Tick(this.time);
                if ($t().layers[i].paintingEnabled && this.canPaint && WebGLHelper.Input.GetButtonState(0 /* MouseButton.Left */) && !WebGLHelper.Input.IsKeyPressed(16 /* KeyCode.Shift */)) {
                    this.paintShader.Use();

                    this.paintShader.SetFloat("uResolution", $d.array(System.Single, [(($t.$baseType().get_Canvas().width) | 0), 
                        (($t.$baseType().get_Canvas().height) | 0)]));
                    this.paintShader.SetFloat("uPainter", $d.array(System.Single, [this.get_ShaderMX(), 
                        this.get_ShaderMY()]));
                    this.paintShader.SetFloat("uRadius", $d.array(System.Single, [this.brushRadius]));
                    this.paintShader.SetFloat("uPaintColor", WebGLHelper.Input.IsKeyPressed(17 /* KeyCode.Ctrl */) ? $d.array(System.Single, 
                        [0, 0, 0, 0]) : $d.array(System.Single, [$t().layers[i].paintColor.x, $t().layers[i].paintColor.y, 
                        $t().layers[i].paintColor.z, 1]));
                    $t().layers[i].Flip(this.paintShader);
                }
            }

            $t.$baseType().get_Context().viewport(0, 0, (($t.$baseType().get_Canvas().width) | 0), (($t.$baseType().get_Canvas().height) | 0));
            this.finalShader.Use();
            $t.$baseType().get_Context().bindFramebuffer(36160 /* WebGLRenderingContext.FRAMEBUFFER */, 
                null);
            $t.$baseType().get_Context().clearColor(0, 0, 0, 0);
            $t.$baseType().get_Context().clear(16640 /* GL.COLOR_BUFFER_BIT | GL.DEPTH_BUFFER_BIT */);


            for (var l = 0; l < YouTomaton.Main().MaxLayers; l++) {
                if ($t().layers[l] != null && $t().layers[l].enabled) {
                    this.finalShader.SetInt("layer" + $d.toString(l), $d.array(System.Int32, [l]));
                    $t().layers[l].BindTexture(33984 /* WebGLRenderingContext.TEXTURE0 */ + l);
                }
                else {
                    $t.$baseType().get_Context().activeTexture(33984 /* WebGLRenderingContext.TEXTURE0 */ + l);
                    $t.$baseType().get_Context().bindTexture(3553 /* WebGLRenderingContext.TEXTURE_2D */, 
                        null);
                }
            }
            this.finalShader.SetFloat("uResolution", $d.array(System.Single, [(($t.$baseType().get_Canvas().width) | 0), 
                (($t.$baseType().get_Canvas().height) | 0)]));
            this.finalShader.SetFloat("uContentSize", $d.array(System.Single, [1024 /* Main.defaultSize */ * $t().zoom, 
                1024 /* Main.defaultSize */ * $t().zoom]));
            this.finalShader.SetFloat("uPosition", $d.array(System.Single, [$t().position.x, $t().position.y]));
            YouTomaton.Main.DrawQuad(this.finalShader);
            for (var i = 0; i < $t().MaxLayers; i++) {
                if ($t().layers[i].clearEachFrame) {
                    $t().layers[i].Clear();
                }
            }
        }
    };
    $t.DrawQuad = function Main_DrawQuad(s) {
        s.SetBuffer(System.Single, "aVertexPosition", ($d.cast($t.$baseType().get_Instance(), YouTomaton.Main)).vBuffer);
        s.SetBuffer(System.Single, "aTextureCoord", ($d.cast($t.$baseType().get_Instance(), YouTomaton.Main)).tBuffer);
        $t.$baseType().get_Context().drawArrays(4 /* WebGLRenderingContext.TRIANGLES */, 0, 6);
    };
    $p.ClassElements = function Main_ClassElements(name) {
        return document.getElementsByClassName(name);
    };
    $p.Class = function Main_Class(name) {
        var els = this.ClassElements(name);
        if (els.length < 1)
            return null;
        return els.item(0);
    };
    $p.Id$1 = function Main_Id(T, name) {

        var element = {};
        if (!this.elements.TryGetValue(name, element)) {
            element.value = $d.cast(document.getElementById(name), T);
            this.elements.Add$1(name, element.value);
        }
        return $d.cast(element.value, T);
    };
    $p.Id = function Main_Id(name) {
        return this.Id$1(HTMLElement, name);
    };
    $p.Tag = function Main_Tag(T, name) {

        return document.getElementsByTagName(name)[0];
    };
    $p.Tag$1 = function Main_Tag(T, parent, name) {
        return parent.getElementsByTagName(name)[0];
    };
    $p.Click$1 = function Main_Click(id, action) {
        this.Id(id).onclick = $d.delegate(function(x) {
            action();
            return true;
        }, this);
    };
    $p.Click = function Main_Click(element, action) {
        element.onclick = $d.delegate(function(x) {
            action();
            return true;
        }, this);
    };
    $t.Screen2Shader = function Main_Screen2Shader(screen, bSize) {
        return new WebGLHelper.Vector2.ctor$1((WebGLHelper.Input().get_MousePosition().x) / (bSize * $t().zoom) + $t().position.x / $t.$baseType().get_Width(), 
            ($t.$baseType().get_Height() - WebGLHelper.Input().get_MousePosition().y) / (bSize * $t().zoom) + $t().position.y / $t.$baseType().get_Height());
    };
    $t.Make$1 = function Main_Make(T, parent, tag) {
        var element = document.createElement(tag);
        parent.appendChild(element);
        return element;
    };
    $t.Make = function Main_Make(parent, tag) {
        var element = document.createElement(tag);
        parent.appendChild(element);
        return element;
    };
});
YouTomaton.Shaders = $d.declare("YouTomaton.Shaders", System.Object, 0, $asm, function($t, $p) {
    $t.cctor = function() {
        $t.Prex = "\r\n#ifdef GL_FRAGMENT_PRECISION_HIGH\r\nprecision highp float;\r\n#else\r\nprecision mediump float;\r\n#endif";
        $t.VertexShader = "\r\n#ifdef GL_FRAGMENT_PRECISION_HIGH\r\nprecision highp float;\r\n#else\r\nprecision mediump float;\r\n#endif\r\nattribute vec2 aTextureCoord;\r\nattribute vec2 aVertexPosition;\r\n\r\nvarying vec2 vTextureCoord;\r\n\r\nvoid main(void) {\r\n    gl_Position = vec4(aVertexPosition, 0.0, 1.0);\r\n    vTextureCoord = aTextureCoord;\r\n}";
        $t.FinalVertexShader = "\r\n#ifdef GL_FRAGMENT_PRECISION_HIGH\r\nprecision highp float;\r\n#else\r\nprecision mediump float;\r\n#endif\r\nattribute vec2 aVertexPosition;\r\nattribute vec2 aTextureCoord;\r\nvarying vec2 vTextureCoord;\r\nuniform vec2 uContentSize;\r\nuniform vec2 uResolution;\r\nuniform vec2 uPosition;\r\nvoid main(void) {\r\n    gl_Position = vec4(aVertexPosition, 0.0, 1.0);\r\n    vTextureCoord = aTextureCoord * (uResolution / uContentSize) + uPosition / uResolution;\r\n}";
        $t.PaintShader = "\r\n#ifdef GL_FRAGMENT_PRECISION_HIGH\r\nprecision highp float;\r\n#else\r\nprecision mediump float;\r\n#endif\r\nuniform sampler2D uSampler;\r\nuniform vec2 uResolution;\r\nuniform highp vec2 uPainter;\r\nuniform highp float uRadius;\r\nuniform vec4 uPaintColor;\r\nvarying vec2 vTextureCoord;\r\n\r\nfloat ls(vec2 f)\r\n{\r\n    return f.x * f.x + f.y * f.y;\r\n}\r\n\r\nvoid main(void) {\r\n\r\n    vec2 pp1 = mod(uPainter, vec2(1.0));\r\n    vec2 pp0 = pp1 + vec2(vTextureCoord.x > 0.5 ? 1 : -1, vTextureCoord.y > 0.5 ? 1 : -1);\r\n    vec2 pp2 = vec2(pp0.x, pp1.y);\r\n    vec2 pp3 = vec2(pp1.x, pp0.y);\r\n    float rs = uRadius * uRadius;\r\n    vec4 val = texture2D(uSampler, vTextureCoord);\r\n    vec2 g = vec2(0.5) / uResolution;\r\n    if(uRadius > g.x * 2.0)\r\n    {\r\n        if(ls(vTextureCoord - pp0) <= rs || ls(vTextureCoord - pp1) <= rs || ls(vTextureCoord - pp2) <= rs || ls(vTextureCoord - pp3) <= rs)\r\n        {\r\n            val = uPaintColor;\r\n        }\r\n    }\r\n    else if(uRadius > 0.0)\r\n    {\r\n            \r\n        if(pp1.x - g.x < vTextureCoord.x && pp1.x + g.x >= vTextureCoord.x && pp1.y - g.y < vTextureCoord.y && pp1.y + g.y >= vTextureCoord.y)\r\n        {\r\n            val = uPaintColor;\r\n        }\r\n    }\r\n    gl_FragColor = val;\r\n}\r\n";
        $t.FragmentSimple = "\r\nvarying vec2 vTextureCoord;\r\nuniform sampler2D source;\r\nvoid main(void) {\r\n    gl_FragColor = texture2D(source, vTextureCoord);\r\n}";
        $t.Frag0 = "\r\n\r\nvarying vec2 vTextureCoord;\r\nuniform vec2 uResolution;\r\nuniform sampler2D layer0;\r\nuniform sampler2D layer1;\r\nuniform sampler2D layer2;\r\nuniform sampler2D layer3;\r\nuniform sampler2D layer4;\r\nuniform sampler2D layer5;\r\nuniform sampler2D layer6;\r\nuniform sampler2D layer7;\r\nuniform sampler2D noiseTex;\r\nuniform float uTime;\r\nint CountNeighbours(sampler2D sampler)\r\n{\r\n    int a = 0;\r\n    vec2 step = vec2(1.0) / uResolution.x;\r\n    for(int x = -1; x < 2; x++)\r\n    {\r\n        for(int y = -1; y < 2; y++)\r\n        {\r\n            if(x != 0 || y != 0)\r\n            {\r\n                vec4 n = texture2D(sampler, vTextureCoord + vec2(x,y)*step);\r\n                if(n.r > 0.0)\r\n                    a++;    \r\n            }  \r\n        } \r\n    }\r\n    return a;\r\n}\r\nvoid main(void) {\r\n\r\n    int n = CountNeighbours(layer0);\r\n    vec4 self = texture2D(layer0, vTextureCoord);\r\n    if(self.r > 0.0)\r\n    {\r\n        if(n < 2 || n > 3)\r\n        {\r\n            self = vec4(0.0);\r\n        }\r\n    }\r\n    else\r\n    {\r\n        if(n == 3)\r\n        {\r\n            self = vec4(1.0);\r\n        }\r\n    }\r\n    gl_FragColor = self;\r\n}";
        $t.Frag1 = "\r\n\r\nvarying vec2 vTextureCoord;\r\nuniform vec2 uResolution;\r\nuniform sampler2D layer0;\r\nuniform sampler2D layer1;\r\nuniform sampler2D layer2;\r\nuniform sampler2D layer3;\r\nuniform sampler2D layer4;\r\nuniform sampler2D layer5;\r\nuniform sampler2D layer6;\r\nuniform sampler2D layer7;\r\nuniform sampler2D noiseTex;\r\nuniform float uTime;\r\nconst float s2 = 1.41421356;\r\n\r\nvoid main(void) {\r\n\r\n    float a = 1.2;\r\n    float b = 1.0;\r\n    float c = 1.0;\r\n    float f = 0.3;\r\n    a *= f;\r\n    b *= f;\r\n    c *= f;\r\n    vec4 total = vec4(0.0);\r\n    vec2 step = vec2(1.0) / uResolution.x;\r\n    \r\n    for(int x = -1; x < 2; x++)\r\n    {\r\n        for(int y = -1; y < 2; y++)\r\n        {\r\n            total += texture2D(layer1, vTextureCoord + vec2(x,y)*step);   \r\n        } \r\n    }\r\n    total /= 9.0;\r\n    total += vec4(0.5);\r\n    vec3 n = vec3(total.r + pow(total.r, 3.0) *(a * total.g - c * total.b),\r\n                  total.g + pow(total.g, 3.0) *(b * total.b - a * total.r),\r\n                  total.b + pow(total.b, 3.0) *(c * total.r - b * total.g));\r\n    gl_FragColor = vec4(clamp(n - vec3(0.5), vec3(0.0),vec3(1.0)),1.0);\r\n}";
    };
});
YouTomaton.YTProgram = $d.declare("YouTomaton.YTProgram", WebGLHelper.Program, 0, $asm, function($t, $p) {
    $t.ctor = function YTProgram() {
        $t.$baseType.ctor.call(this);
    };
    $t.ctor.prototype = $p;
    $p.OnCreate = function YTProgram_OnCreate() {};
    $p.OnRender = function YTProgram_OnRender(t, dt) {};
});
return $asm;
})();
//# sourceMappingURL=YouTomaton.js.map
